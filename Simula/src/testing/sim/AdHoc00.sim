BEGIN
   Boolean found_error;
   Boolean verbose=TRUE; !FALSE;

   integer i, j, t;
   Boolean b,BBB;
   
   procedure trace(msg); Text msg;
   begin
      if verbose then
      begin outtext(msg & " - t,i,j,b ="); 
         Outint(t, 3); Outint(i, 3); Outint(j, 3);
         Outtext(if b then " true" else " false");
         Outimage;
      end;   
   end;

   Outtext("--- START Simula a.s. TEST XX");
   Outimage;
   Outtext("--- Test designational expressions, goto statement");
   Outimage;
   Outtext("--- and complex switch declaration");
   Outimage;

   i := 5;

   begin
      switch st := t1, t2;
      switch s := l1, l2, q(i), if b imp j > i then q(2) else l2;
      switch q := s(1), q(4), q(2),
                  if if j=i then not b else b eqv b then L3 else s(2), q(1);
                  
                  
      Text procedure Pst(ix); integer ix;
      begin  if ix=1 then Pst:-"T1"
        else if ix=2 then Pst:-"T2";
      end; 
       
      Text procedure Ps(ix); integer ix;
      begin  if ix=1 then Ps:-"L1"
        else if ix=2 then Ps:-"L2"
        else if ix=3 then Ps:-Pq(i)
%        else if ix=4 then Ps:- if b imp j > i then Pq(2) else "L1"; 
        else if ix=4 then Ps:- if b imp j > i then Pq(2) else "L2"; 
      end;  
      
      Text procedure Pq(ix); integer ix;
      begin  if ix=1 then Pq:-Ps(1)
        else if ix=2 then Pq:-Pq(4)
        else if ix=3 then Pq:-Pq(2)
        else if ix=4 then
        begin 
           Outtext("IN TEXT PROCEDURE Pq: t,i,j,b=");
           Outint(t, 3); Outint(i, 3); Outint(j, 3);
           Outtext(if b then " true" else " false"); outimage;
           
           Outtext("if j=i then not b else b eqv b EVALUTES "); 
           BBB:=if j=i then not b else b eqv b;
           Outtext(if BBB then " true" else " false"); outimage;
           
           Outtext("if j=i then not b else (b eqv b) EVALUTES "); 
           BBB:=if j=i then not b else (b eqv b);
           Outtext(if BBB then " true" else " false"); outimage;
           
           Outtext("(b eqv b) EVALUTES "); 
           BBB:=(b eqv b);
           Outtext(if BBB then " true" else " false"); outimage;
           
           Outtext("if if j=i then not b else b eqv b then L3 else Ps(2) EVALUTES "); 
           Outtext(if if j=i then not b else b eqv b then "L3" else Ps(2)); outimage;

           Pq:-if if j=i then not b else b eqv b then "L3" else Ps(2)
        end
        else if i=5 then Pq:-Pq(1);
      end;

  T0: trace("AT T0 -- Should GOTO L1");
      if t <> 0 or i <> 5 or j <> 0 or b then
      begin
         Outtext("*** error: Evaluation of designational expression,");
         Outimage;
         Outtext("           goto statement or program sequence ");
         Outtext           ("control (1)."); 
         Outimage;
         Outtext("           Value of significant variables :");
         Outimage;
         Outtext("           ");
         Outint(t, 3); Outint(i, 3); Outint(j, 3);
         Outtext(if b then " true" else " false");
         Outimage;
         found_error := true;
      end;

      t := 1;
      trace("Should GOTO " & Pq(i));
      go to q(i);


  T1: trace("AT T1 -- Should GOTO L2");
  T2: trace("AT T2 -- Should GOTO L3");
  L1: trace("AT L1 -- Should GOTO T1");
  L2: trace("AT L2 -- Should GOTO T2");
  L3: trace("AT L3 -- Should TERMINATE");
 END;
