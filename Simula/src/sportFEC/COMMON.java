package sportFEC;
// Simula-Beta-0.3 Compiled at Sun Apr 14 09:36:42 CEST 2019
import simula.runtime.*;
@SuppressWarnings("unchecked")
public class COMMON extends CLASS$ {
    public int prefixLevel() { return(0); }
    final LABQNT$ EXCEPTION_HANDLER=new LABQNT$(this,1,"EXCEPTION_HANDLER");
    public final char NUL=(char)(((char)0));
    public char identhi=0;
    public char identlo=0;
    public char consthi=0;
    public char constlo=0;
    public char hashhi=0;
    public char hashlo=0;
    public TXT$ simsymbol=null;
    public ARRAY$<COMMON$symbolgroup[]>symtab=null;
    public ARRAY$<COMMON$symbolbox[]>hashtab=null;
    public COMMON$symbolgroup dummyGroup=null;
    public COMMON$identsymbol dummyBox=null;
    public ARRAY$<char[]>option=null;
    public final TXT$ sportid=(TXT$)(new TXT$("S-PORT SYSTEM"));
    public final int maxasd=(int)(30);
    public final int maxplev=(int)(63);
    public final int maxblev=(int)(250);
    public final int maxdepth=(int)(100);
    public final int maxcalldepth=(int)(15);
    public final int maxjumpdepth=(int)(100);
    public final int SbufferMax=(int)(750);
    public final int L2max=(int)(256);
    public final int RepeatMax=(int)(256);
    public final char IBOOL=(char)(((char)1));
    public final char ICHAR=(char)(((char)2));
    public final char ISHOR=(char)(((char)3));
    public final char IINTG=(char)(((char)4));
    public final char IREAL=(char)(((char)5));
    public final char ILONG=(char)(((char)6));
    public final char IREF=(char)(((char)7));
    public final char ITEXT=(char)(((char)8));
    public final char IPTR=(char)(((char)9));
    public final char IVALU=(char)(((char)10));
    public final char ILABE=(char)(((char)11));
    public final char IPROC=(char)(((char)12));
    public final char IARRA=(char)(((char)13));
    public final char INOTY=(char)(((char)14));
    public final char IELSE=(char)(((char)15));
    public final char IEND=(char)(((char)16));
    public final char IEQV=(char)(((char)17));
    public final char IEXTR=(char)(((char)18));
    public final char IFOR=(char)(((char)19));
    public final char IGO=(char)(((char)20));
    public final char IGOTO=(char)(((char)21));
    public final char IHIDD=(char)(((char)22));
    public final char IIF=(char)(((char)23));
    public final char IIMP=(char)(((char)24));
    public final char IIN=(char)(((char)25));
    public final char IINNE=(char)(((char)26));
    public final char IINSP=(char)(((char)27));
    public final char IDO=(char)(((char)28));
    public final char IIS=(char)(((char)29));
    public final char ICLAS=(char)(((char)30));
    public final char IRCRD=(char)(((char)31));
    public final char IBEGI=(char)(((char)32));
    public final char INAME=(char)('!');
    public final char INEW=(char)('"');
    public final char INOT=(char)('#');
    public final char IOR=(char)('$');
    public final char IOTHW=(char)('%');
    public final char IPRIO=(char)('&');
    public final char IDELA=(char)(((char)39));
    public final char IPRTC=(char)('(');
    public final char IQUA=(char)(')');
    public final char IREAC=(char)('*');
    public final char IAT=(char)('+');
    public final char IBEFO=(char)(',');
    public final char IAND=(char)('-');
    public final char ISTEP=(char)('.');
    public final char ISWIT=(char)('/');
    public final char IACTV=(char)('0');
    public final char ITHEN=(char)('1');
    public final char ITHIS=(char)('2');
    public final char ITO=(char)('3');
    public final char IUNTI=(char)('4');
    public final char IAFTR=(char)('5');
    public final char IVIRT=(char)('6');
    public final char IWHEN=(char)('7');
    public final char IWHIL=(char)('8');
    public final char ILT=(char)('9');
    public final char IEQ=(char)(':');
    public final char ILE=(char)(';');
    public final char IGT=(char)('<');
    public final char INE=(char)('=');
    public final char IGE=(char)('>');
    public final char ICOMN=(char)('?');
    public final char INONE=(char)('@');
    public final char INOTE=(char)('A');
    public final char ITRUE=(char)('B');
    public final char IFALS=(char)('C');
    public final char detachident=(char)('D');
    public final char printfileindex=(char)('E');
    public final char infileindex=(char)('F');
    public final char errorident=(char)('G');
    public final char textclassindex=(char)('H');
    public final char predefindex=(char)('I');
    public final char alloc2index=(char)('J');
    public final char recordindex=(char)('K');
    public final char Cindex=(char)('L');
    public final char Pascalindex=(char)('M');
    public final char Libraryindex=(char)('N');
    public final char IRFEQ=(char)('D');
    public final char IRFNE=(char)('E');
    public final char IPLUS=(char)('F');
    public final char IMINU=(char)('G');
    public final char IMULT=(char)('H');
    public final char ISLAS=(char)('I');
    public final char IPOWE=(char)('J');
    public final char IIDIV=(char)('K');
    public final char IDOT=(char)('L');
    public final char ICL=(char)('M');
    public final char ICOMA=(char)('N');
    public final char ISMCL=(char)('O');
    public final char ILFPA=(char)('P');
    public final char IRGPA=(char)('Q');
    public final char IASSG=(char)('R');
    public final char IDENO=(char)('S');
    public final char ICONC=(char)('T');
    public final char ICAND=(char)('U');
    public final char ICOR=(char)('V');
    public final char ICASE=(char)('W');
    public final char IEOP=(char)('X');
    public final char IROPD=(char)('Y');
    public final char IIDN=(char)('Z');
    public final char ICONS=(char)('[');
    public final char IBLKB=(char)('\\');
    public final char IBPRF=(char)(']');
    public final char IDCLI=(char)('^');
    public final char IFRMP=(char)('_');
    public final char IABTE=(char)('`');
    public final char IACTE=(char)('a');
    public final char IARGE=(char)('b');
    public final char IARDE=(char)('c');
    public final char IASGE=(char)('d');
    public final char IBLNO=(char)('e');
    public final char IBNDE=(char)('f');
    public final char IBREC=(char)('g');
    public final char ICAPE=(char)('h');
    public final char ICONB=(char)('i');
    public final char ICONE=(char)('j');
    public final char ICPRF=(char)('k');
    public final char ICSPC=(char)('l');
    public final char IDCLA=(char)('m');
    public final char IDCLC=(char)('n');
    public final char IDCLE=(char)('o');
    public final char IDCLP=(char)('p');
    public final char IDCLS=(char)('q');
    public final char IDIME=(char)('r');
    public final char IDOTP=(char)('s');
    public final char IEEXP=(char)('t');
    public final char IECWI=(char)('u');
    public final char IELME=(char)('v');
    public final char IELSB=(char)('w');
    public final char IEPRM=(char)('x');
    public final char IEREC=(char)('y');
    public final char IESTM=(char)('z');
    public final char IEXNM=(char)('{');
    public final char IFASG=(char)('|');
    public final char IFDNO=(char)('}');
    public final char IFORE=(char)('~');
    public final char IFWHN=(char)(((char)127));
    public final char IGOE=(char)(((char)128));
    public final char IIDNP=(char)(((char)129));
    public final char IIFSB=(char)(((char)130));
    public final char IIFSE=(char)(((char)131));
    public final char ILANG=(char)(((char)132));
    public final char ILINE=(char)(((char)133));
    public final char INEWP=(char)(((char)134));
    public final char IOTHE=(char)(((char)135));
    public final char IPRHI=(char)(((char)136));
    public final char IPSPC=(char)(((char)137));
    public final char ISCST=(char)(((char)138));
    public final char ISIDN=(char)(((char)139));
    public final char ISIMU=(char)(((char)140));
    public final char ISSWA=(char)(((char)141));
    public final char ISSWB=(char)(((char)142));
    public final char ISWDE=(char)(((char)143));
    public final char ISWEE=(char)(((char)144));
    public final char ITHSB=(char)(((char)145));
    public final char IUMNS=(char)(((char)146));
    public final char IUPLS=(char)(((char)147));
    public final char IVSPC=(char)(((char)148));
    public final char IMXMX=(char)(((char)148));
    public final char zerohi=(char)(((char)127));
    public final char zerolo=(char)(((char)255));
    public final int zero=(int)(0);
    public final int one=(int)(1);
    public final char C_unspec=(char)(((char)0));
    public final char C_value=(char)(((char)1));
    public final char C_name=(char)(((char)2));
    public final char C_local=(char)(((char)3));
    public final char C_extnal=(char)(((char)4));
    public final char C_unknwn=(char)(((char)5));
    public final char C_virt=(char)(((char)6));
    public final char C_block=(char)(((char)7));
    public final char C_max=(char)(((char)7));
    public final char K_ident=(char)(((char)0));
    public final char K_proc=(char)(((char)1));
    public final char K_array=(char)(((char)2));
    public final char K_label=(char)(((char)3));
    public final char K_switch=(char)(((char)4));
    public final char K_class=(char)(((char)5));
    public final char K_rep=(char)(((char)6));
    public final char K_record=(char)(((char)7));
    public final char K_subbl=(char)(((char)8));
    public final char K_prefbl=(char)(((char)9));
    public final char K_error=(char)(((char)10));
    public final char K_labbl=(char)(((char)11));
    public final char K_unknwn=(char)(((char)12));
    public final char K_extnal=(char)(((char)13));
    public final char K_max=(char)(((char)13));
    public final char Clf000=(char)(((char)0));
    public final char Clf001=(char)(((char)1));
    public final char Clf002=(char)(((char)2));
    public final char Clf003=(char)(((char)3));
    public final char Clf004=(char)(((char)4));
    public final char Clf005=(char)(((char)5));
    public final char Clf006=(char)(((char)6));
    public final char Clf007=(char)(((char)7));
    public final char Clf008=(char)(((char)8));
    public final char Clf009=(char)(((char)9));
    public final char Clf010=(char)(((char)10));
    public final char Clf011=(char)(((char)11));
    public final char Clf012=(char)(((char)12));
    public final char Clf013=(char)(((char)13));
    public final char Clf014=(char)(((char)14));
    public final char Clf015=(char)(((char)15));
    public final char Clf016=(char)(((char)16));
    public final char Clf017=(char)(((char)17));
    public final char Clf018=(char)(((char)18));
    public final char Clf019=(char)(((char)19));
    public final char Clf020=(char)(((char)20));
    public final char Clf021=(char)(((char)21));
    public final char Clf022=(char)(((char)22));
    public final char Clf023=(char)(((char)23));
    public final char Clf024=(char)(((char)24));
    public final char Clf025=(char)(((char)25));
    public final char Clf026=(char)(((char)26));
    public final char Clf027=(char)(((char)27));
    public final char Clf028=(char)(((char)28));
    public final char Clf029=(char)(((char)29));
    public final char Clf030=(char)(((char)30));
    public final char Clf031=(char)(((char)31));
    public final char Clf032=(char)(((char)32));
    public final char Clf033=(char)('!');
    public final char Clf034=(char)('"');
    public final char Clf035=(char)('#');
    public final char Clf036=(char)('$');
    public final char Clf037=(char)('%');
    public final char Clf038=(char)('&');
    public final char Clf039=(char)(((char)39));
    public final char Clf040=(char)('(');
    public final char Clf041=(char)(')');
    public final char Clf042=(char)('*');
    public final char Clf043=(char)('+');
    public final char Clf044=(char)(',');
    public final char Clf045=(char)('-');
    public final char Clf046=(char)('.');
    public final char Clf047=(char)('/');
    public final char Clf048=(char)('0');
    public final char Clfmax=(char)('0');
    public int numerrfound=0;
    public int simob_level=0;
    public int linelength=0;
    public int signiflength=0;
    public int listlength=0;
    public int maxnumoftags=0;
    public char nextblhi=0;
    public char nextbllo=0;
    public boolean simob_descr=false;
    public boolean simob_entity=false;
    public boolean simob_const=false;
    public boolean RealCap=false;
    public boolean definition=false;
    public boolean recomp=false;
    public boolean separatecomp=false;
    public boolean listingon=false;
    public boolean GiveNotes=false;
    public boolean SportOK=false;
    public boolean Simuletta=false;
    public boolean GenerateScode=false;
    public char opt=0;
    public char opn=0;
    public char optx=0;
    public char opdhi=0;
    public char opdlo=0;
    public char ltype=0;
    public char rtype=0;
    public char currentpass=0;
    public char termstatus=0;
    public PrintFile$ listfile=null;
    public OutbyteFile$ L2OUPT=null;
    public InbyteFile$ L2INPT=null;
    public COMMON$component scanner=null;
    public COMMON$component parser=null;
    public COMMON$outcodefile coder=null;
    public COMMON$quantity setprefgoing=null;
    public COMMON$quantity alloc2called=null;
    public COMMON$brecord unknowns=null;
    public int linenr=0;
    public int messageLinenr=0;
    public int EXC_NUMBER=0;
    public TXT$ listpart=null;
    public TXT$ line=null;
    public TXT$ L2NAME=null;
    public TXT$ nscodename=null;
    public TXT$ timestamp=null;
    public TXT$ progheadstring=null;
    public TXT$ L2codebuffer=null;
    public TXT$ predefname=null;
    public TXT$ simsetname=null;
    public TXT$ simulaname=null;
    public TXT$ attrfilename=null;
    public TXT$ moduleident=null;
    public TXT$ checkcode=null;
    public TXT$ leftintbuf=null;
    public TXT$ leftsintbuf=null;
    public TXT$ permt=null;
    public ARRAY$<COMMON$brctab2[]>brctab=null;
    public ARRAY$<COMMON$quantity[]>prefixchain=null;
    public ARRAY$<COMMON$brecord[]>display=null;
    public ARRAY$<TXT$[]>diag=null;
    public PRCQNT$ COMMONerror$0() { throw new RuntimeException("No Virtual Match"); }
    public PRCQNT$ ENDCOMP$0() { throw new RuntimeException("No Virtual Match"); }
    public COMMON(RTObject$ staticLink) {
        super(staticLink);
        BBLK(); // Iff no prefix
        TRACE_BEGIN_DCL$("COMMON",1569);
        int[] symtab$LB=new int[1]; int[] symtab$UB=new int[1];
        symtab$LB[0]=0; symtab$UB[0]=127;
        BOUND_CHECK$(symtab$LB[0],symtab$UB[0]);
        symtab=new ARRAY$<COMMON$symbolgroup[]>(new COMMON$symbolgroup[symtab$UB[0]-symtab$LB[0]+1],symtab$LB,symtab$UB);
        int[] hashtab$LB=new int[1]; int[] hashtab$UB=new int[1];
        hashtab$LB[0]=0; hashtab$UB[0]=255;
        BOUND_CHECK$(hashtab$LB[0],hashtab$UB[0]);
        hashtab=new ARRAY$<COMMON$symbolbox[]>(new COMMON$symbolbox[hashtab$UB[0]-hashtab$LB[0]+1],hashtab$LB,hashtab$UB);
        int[] option$LB=new int[1]; int[] option$UB=new int[1];
        option$LB[0]=0; option$UB[0]=95;
        BOUND_CHECK$(option$LB[0],option$UB[0]);
        option=new ARRAY$<char[]>(new char[option$UB[0]-option$LB[0]+1],option$LB,option$UB);
        int[] brctab$LB=new int[1]; int[] brctab$UB=new int[1];
        brctab$LB[0]=0; brctab$UB[0]=127;
        BOUND_CHECK$(brctab$LB[0],brctab$UB[0]);
        brctab=new ARRAY$<COMMON$brctab2[]>(new COMMON$brctab2[brctab$UB[0]-brctab$LB[0]+1],brctab$LB,brctab$UB);
        int[] prefixchain$LB=new int[1]; int[] prefixchain$UB=new int[1];
        prefixchain$LB[0]=0; prefixchain$UB[0]=64;
        BOUND_CHECK$(prefixchain$LB[0],prefixchain$UB[0]);
        prefixchain=new ARRAY$<COMMON$quantity[]>(new COMMON$quantity[prefixchain$UB[0]-prefixchain$LB[0]+1],prefixchain$LB,prefixchain$UB);
        int[] display$LB=new int[1]; int[] display$UB=new int[1];
        display$LB[0]=0; display$UB[0]=maxplev;
        BOUND_CHECK$(display$LB[0],display$UB[0]);
        display=new ARRAY$<COMMON$brecord[]>(new COMMON$brecord[display$UB[0]-display$LB[0]+1],display$LB,display$UB);
        int[] diag$LB=new int[1]; int[] diag$UB=new int[1];
        diag$LB[0]=0; diag$UB[0]=5;
        BOUND_CHECK$(diag$LB[0],diag$UB[0]);
        diag=new ARRAY$<TXT$[]>(new TXT$[diag$UB[0]-diag$LB[0]+1],diag$LB,diag$UB);
    }
    public COMMON STM$() {
        COMMON THIS$=(COMMON)CUR$;
        LOOP$:while(JTX$>=0) {
            try {
                JUMPTABLE$(JTX$);
                if(VALUE$(false)) {
                    {
                        LABEL$(1,"EXCEPTION_HANDLER");
                        sysout().outimage();
                        if(VALUE$((((EXC_NUMBER==(22))||((EXC_NUMBER==(31))))||((EXC_NUMBER==(32)))))) {
                            {
                                sysout().outtext(new TXT$("*** NOT ENOUGH STORAGE AVAILABLE ***"));
                                terminate_program();
                            }
                        }
                        ((COMMON)CUR$).COMMONerror$0().CPF().setPar((-(EXC_NUMBER))).ENT$();
                    }
                }
                giveIntInfo(1,6);
                new COMMON$StandardException(((COMMON)CUR$));
                break LOOP$;
            }
            catch(LABQNT$ q) {
                CUR$=THIS$;
                if(q.SL$!=CUR$) {
                    CUR$.STATE$=OperationalState.terminated;
                    throw(q);
                }
                JTX$=q.index; continue LOOP$;
            }
        }
        EBLK();
        return(this);
    }
    public static PROGINFO$ INFO$=new PROGINFO$("COMMON.DEF","Class COMMON",1,1,8,1574,10,61,12,63,17,64,20,65,22,69,24,74,26,79,29,271,31,290,33,294,35,295,37,296,39,297,41,298,43,299,45,308,47,309,49,310,51,335,53,336,55,337,57,338,59,339,61,340,63,341,65,342,67,343,69,344,71,345,73,346,75,347,77,348,79,349,81,350,83,351,85,352,87,353,89,354,91,355,93,356,95,357,97,358,99,359,101,360,103,361,105,362,107,363,109,364,111,365,113,366,115,367,117,368,119,369,121,370,123,371,125,372,127,373,129,374,131,375,133,376,135,377,137,378,139,379,141,380,143,381,145,382,147,383,149,384,151,385,153,386,155,387,157,388,159,389,161,390,163,391,165,392,167,393,169,394,171,395,173,396,175,397,177,398,179,399,181,400,183,401,185,403,187,404,189,405,191,406,193,407,195,408,197,409,199,410,201,411,203,412,205,413,207,415,209,416,211,417,213,418,215,419,217,420,219,421,221,422,223,423,225,424,227,425,229,426,231,427,233,428,235,429,237,430,239,431,241,432,243,433,245,434,247,435,249,436,251,437,253,438,255,442,257,443,259,444,261,445,263,446,265,447,267,448,269,449,271,450,273,451,275,452,277,453,279,454,281,455,283,456,285,457,287,458,289,459,291,460,293,461,295,462,297,463,299,464,301,465,303,466,305,467,307,468,309,469,311,470,313,471,315,472,317,473,319,474,321,475,323,476,325,477,327,478,329,479,331,480,333,481,335,482,337,483,339,484,341,485,343,486,345,487,347,488,349,489,351,490,353,491,355,492,357,493,359,494,361,495,363,496,365,497,367,498,369,499,371,500,373,501,375,546,378,552,380,553,382,554,384,555,386,556,388,557,390,558,392,559,394,561,396,579,398,580,400,581,402,582,404,583,406,584,408,585,410,586,412,587,414,588,416,589,418,590,420,591,422,592,424,594,426,618,428,620,430,621,432,625,434,626,436,628,438,636,440,640,442,643,444,650,446,653,448,656,450,661,452,665,454,668,456,674,458,681,460,686,462,687,464,688,466,691,468,692,470,693,472,694,474,695,476,696,478,697,480,698,482,699,484,700,486,701,488,702,490,703,492,704,494,705,496,706,498,707,500,708,502,709,504,710,506,711,508,712,510,713,512,714,514,715,516,716,518,717,520,718,522,719,524,721,526,744,528,747,530,748,534,749,536,750,539,751,543,752,545,753,547,754,549,755,551,756,554,757,556,758,558,759,560,761,564,762,567,763,570,764,572,765,574,767,576,768,578,769,580,770,583,771,585,773,588,774,590,776,592,777,594,778,596,781,598,782,600,783,603,784,605,785,607,786,609,787,611,788,614,789,618,791,620,792,622,793,624,797,626,798,628,799,630,800,638,69,643,74,648,271,653,797,658,798,663,799,668,800,679,1572,681,1573,683,1574,686,1575,688,1582,691,1583,695,1585,699,1588,701,1589,703,1572,717,1591);
}
