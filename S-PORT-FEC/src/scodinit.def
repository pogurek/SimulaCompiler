External class SCODER3;

SCODER3 class SCODINIT;
%      -----------------------------------------------------------------------
%      ---                                                                 ---
%      ---  COPYRIGHT 1987 by                                              ---
%      ---  Simula a.s.                                                    ---
%      ---  Oslo, Norway                                                   ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                 P O R T A B L E     S I M U L A                 ---
%      ---                                                                 ---
%      ---              F R O N T - E N D    C O M P I L E R               ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---          S C O D E R    i n i t i a l i s a t i o n s           ---
%      ---                                                                 ---
%      --- Selection switches: IZ                                          ---
%      ---                                                                 ---
%      ---    'D' Included when dump is wanted                             ---
%      ---    'K' Included always when quick capability wanted             ---
%      ---    'M' Included always when macro capability wanted             ---
%      ---    'P' Included to make compiler use quick procedures           ---
%      ---    'I' Included to make compiler use inserted mnemonics         ---
%      ---    'Z' Included at system generation (for "ZIMULA")             ---
%      ---                                                                 ---
%      -----------------------------------------------------------------------
begin

%+I %INSERT (FEC-105)COMMON:MNE
%+I %INSERT (FEC-105)SCODER:MNE
%+I %INSERT (RTS-105)RTSINIT:MNE       !NOTE: *** MAY BE CHANGED ***;

codegenerator3 class codegeneratorinit;
begin

%    ********   former procedure "initialize"   *********

% not used  !precall:=1; !asscall:=2;

            vopc(ITEXT):=11;      ! text ;
            vopc(ICHAR):=12;      ! c-char ;
            vopc(IINTG):=13;      ! c-int ;
            vopc(IREAL):=15;      ! c-real ;
            vopc(ILONG):=16;      ! c-lreal ;

            vopc(IEQ  ):=121;     ! ?eq ;
            vopc(INE  ):=124;     ! ?ne ;
            vopc(ILT  ):=119;     ! ?lt ;
            vopc(ILE  ):=120;     ! ?le ;
            vopc(IGE  ):=122;     ! ?ge ;
            vopc(IGT  ):=123;     ! ?gt ;
            vopc(IRFNE):=124;     ! ?ne ;
            vopc(IRFEQ):=121;     ! ?eq ;

            vopc(INONE):=25;      ! onone ;
            vopc(ITRUE):=28;      ! true ;
            vopc(IFALS):=29;      ! false ;

            vopc(IPLUS):=98;      ! add ;
            vopc(IMINU):=99;      ! sub ;
            vopc(IMULT):=100;     ! mult ;
            vopc(ISLAS):=101;     ! div ;
            vopc(IIDIV):=101;     ! div ;
            vopc(IUMNS):=103;     ! neg ;
            vopc(IAND ):=104;     ! and ;
            vopc(IOR  ):=105;     ! or ;
            vopc(IIMP ):=107;     ! imp ;
            vopc(IEQV ):=108;     ! eqv ;
            vopc(INOT ):=109;     ! not ;

%-I         quantdisp:=0;
%-I         descriptordisp:=0;
%-I         prototypedisp:=1;
%-I         cntdisp:=2;            ! For subblock ;
%-I         startdisp:=2;          ! For procedure ;
%-I         dcldisp:=2;            ! For class/pref.block;
%-I         stmdisp:=3;
%-I         cnt_inrdisp:=4;
%-I         profiledisp:=0;         ! For routine procedure ;
%-I         bodydisp:=1;
%-I         contextdisp:=2;
%-I         exportdisp:=3;
%-I         indirectdisp:=1;        ! For predefined with clf='W' ;
%-I         atrdesdisp:=1;
%+K         instrefdisp:=3;
            sequdisp:=-1; ! negative - can't handle that now;

            NoneCheck:=BoundCheck:= getintinfo(9)=0;
%-Z         QuaCheck:=true;
%+Z         QuaCheck:=false; ! no qua-test generated default in compiler;
            lastusedtag:=31;
            maxtagstack:=maxblev//2; ! - an arbitrary (but reasonable?) limit;

            DEFCONST("0"); zerostringindex:=HASHINDEX;

%      ******   init_RTS   ******

%-I         ! Variables corresponding to Simuletta mnemonics ;
%-I         k_smp:=0; k_pro:=1; k_arr:=2; k_lab:=3; k_swt:=4; k_cla:=5;
%-I         m_ref:=0; m_value:=1; m_name:=2; m_local:=3;
%-I         t_notype:=0; t_boo:=1; t_cha:=2; t_sin:=3;
%-I         t_int:=4; t_rea:=5; t_lrl:=6; t_ref:=7; t_txt:=8;
%-I         s_txtent:=9;

%-I         par_qnt_lit:=0; par_qnt_nas:=1; par_qnt_ass:=2;
%-I         par_thk_nas:=3; par_thk_ass:=4;

%-I         vaccess     := 88;
%-I         vaccessv    :=152;
%-I         vanone      := 24;
%-I         vasscall    :=136;
%-I         vassign     :=111;
%-I         vasspar     := 68;
%-I         vassrep     := 69;
%-I         vattr       :=  4;
%-I         vbdest      := 56;
%-I         vbjump      := 90;
%-I         vbjumpif    := 92;
%-I         vbody       := 45;
%-I         vbseg       := 59;
%-I         vcaaddr     := 17;
%-I         vcall       := 70;
%-I         vcdot       := 21;
%-I         vcompare    :=118;
%-I         vconst      := 53;
%-I         vconstspec  := 52;
%-I         vconvert    :=113;
%-I         vcgaddr     := 19;
%-I         vcoaddr     := 18;
%-I         vcpaddr     := 20;
%-I         vcraddr     := 22;
%-I         vcrecord    := 10;
%-I         vcint       := 13;
%-I         vcsize      := 14;
%-I         vdeco       := 79;
%-I         vdelete     := 54;
%-I         vderef      := 73;
%-I         vdist       :=110;
%-I         vdsize      :=133;
%-I         vdup        := 83;
%-I         velse       := 64;
%-I         vempty      := 85;
%-I         vendif      := 65;
%-I         vendmodule  := 46;
%-I         vendprofile := 37;
%-I         vendprogram :=132;
%-I         vendrecord  :=  9;
%-I         vendskip    := 62;
%-I         veseg       := 60;
%-I         veval       :=125;
%-I         vexisting   := 43;
%-I         vexport     := 35;
%-I         vexternal   := 33;
%-I         vfalse      := 29;
%-I         vfdest      := 55;
%-I         vfetch      := 71;
%-I         vfixrep     :=  8;
%-I         vfjump      := 89;
%-I         vfjumpif    := 91;
%-I         vgetobj     := 87;
%-I         vglobal     := 50;
%-I         vgnone      := 26;
%-I         vgoto       := 94;
%-I         vif         := 63;
%-I         vimport     := 34;
%-I         vinco       := 78;
%-I         vindex      := 77;
%-I         vindexv     :=151;
%-I         vinfo       :=126;
%-I         vinit       := 51;
%-I         vinsert     :=115;
%-I         vlabel      := 48;
%-I         vlabelspec  := 47;
%-I         vline       :=127;
%-I         vlocate     := 76;
%-I         vmain       :=131;
%-I         vmodule     := 42;
%-I         vnobody     := 23;
%-I         vnosize     :=139;
%-I         vnowhere    := 27;
%-I         vonone      := 25;
%-I         vpop        := 84;
%-I         vpopall     :=140;
%-I         vprecall    := 67;
%-I         vprefix     :=  3;
%-I         vprofile    := 30;
%-I         vprogram    :=130;
%-I         vpush       := 80;
%-I         vpushv      :=148;
%-I         vpushc      := 81;
%-I         vpushlen    := 82;
%-I         vrecord     :=  1;
%-I         vrefer      := 72;
%-I         vremote     := 75;
%-I         vremotev    :=150;
%-I         vrep        :=  6;
%-I         vrepcall    :=141;
%-I         vrestore    := 58;
%-I         vrupdate    :=135;
%-I         vsave       := 57;
%-I         vselect     := 74;
%-I         vselectv    :=149;
%-I         vsetobj     := 86;
%-I         vsetswitch  :=128;
%-I         vskipif     := 61;
%-I         vsysinsert  :=114;
%-I         vtag        := 44;
%-I         vtext       := 11;
%-I         vtrue       := 28;
%-I         vupdate     :=112;
%-I         vxor        :=106;

%-I         !   ******   Tags for Predefined Types:   ***** ;
%-I         ptbool:=1;
%-I         ptchar:=2;
%-I         ptint:=3;
%-I         ptsint:=4;
%-I         ptreal:=5;
%-I         ptlreal:=6;
%-I         ptaaddr:=7;
%-I         ptoaddr:=8;
%-I         ptgaddr:=9;
%-I         ptpaddr:=10;
%-I         ptraddr:=11;
%-I         ptsize :=12;

%INSERT (RTS-105)RTSINIT:INIT

            invert(IEQ):=INE; invert(INE):=IEQ; invert(ILE):=IGT;
            invert(IGT):=ILE; invert(ILT):=IGE; invert(IGE):=ILT;
            invert(IRFEQ):=IRFNE; invert(IRFNE):=IRFEQ;

            !*** Tags of the record attributes <type>_arr_<dim>'elt ***;

            arr1elttag(ISHOR):=Z_sin_arr_1e; arr1elttag(IINTG):=Z_int_arr_1e;
            arr1elttag(IREAL):=Z_rea_arr_1e; arr1elttag(ILONG):=Z_lrl_arr_1e;
            arr1elttag(IBOOL):=Z_boo_arr_1e; arr1elttag(ICHAR):=Z_cha_arr_1e;
            arr1elttag(IREF ):=Z_ref_arr_1e; arr1elttag(ITEXT):=Z_txt_arr_1e;

            arr2elttag(ISHOR):=Z_sin_arr_2e; arr2elttag(IINTG):=Z_int_arr_2e;
            arr2elttag(IREAL):=Z_rea_arr_2e; arr2elttag(ILONG):=Z_lrl_arr_2e;
            arr2elttag(IBOOL):=Z_boo_arr_2e; arr2elttag(ICHAR):=Z_cha_arr_2e;
            arr2elttag(IREF ):=Z_ref_arr_2e; arr2elttag(ITEXT):=Z_txt_arr_2e;

            arr3elttag(ISHOR):=Z_sin_arr_el; arr3elttag(IINTG):=Z_int_arr_el;
            arr3elttag(IREAL):=Z_rea_arr_el; arr3elttag(ILONG):=Z_lrl_arr_el;
            arr3elttag(IBOOL):=Z_boo_arr_el; arr3elttag(ICHAR):=Z_cha_arr_el;
            arr3elttag(IREF ):=Z_ref_arr_el; arr3elttag(ITEXT):=Z_txt_arr_el;

            typetag(ISHOR):=ptsint;           typetag(IINTG):=ptint;
            typetag(IREAL):=ptreal;           typetag(ILONG):=ptlreal;
            typetag(IBOOL):=ptbool;           typetag(ICHAR):=ptchar;
            typetag(IREF ):=ptoaddr;          typetag(ITEXT):=Z_txtqnt;
            typetag(IVALU):=ptaaddr;

            rtstypecode(ISHOR):= t_sin;       rtstypecode(IINTG):= t_int;
            rtstypecode(IREAL):= t_rea;       rtstypecode(ILONG):= t_lrl;
            rtstypecode(IBOOL):= t_boo;       rtstypecode(ICHAR):= t_cha;
            rtstypecode(IREF ):= t_ref;       rtstypecode(ITEXT):= t_txt;
            rtstypecode(INOTY):=              rtstypecode(ILABE):= t_notype;

            rtskind(IIDN ):=k_smp;            rtskind(IPROC):=k_pro;
            rtskind(IARRA):=k_arr;            rtskind(ILABE):=k_lab;
            rtskind(ISWIT):=k_swt;

            rtsmode(IFRMP):=m_ref;            rtsmode(IVALU):=m_value;
            rtsmode(INAME):=m_name;           rtsmode(IDCLI):=m_local;

            type_pro_tag(ISHOR):=Z_sin_pro;   type_pro_tag(IINTG):=Z_int_pro;
            type_pro_tag(IREAL):=Z_rea_pro;   type_pro_tag(ILONG):=Z_lrl_pro;
            type_pro_tag(IBOOL):=Z_boo_pro;   type_pro_tag(ICHAR):=Z_cha_pro;
            type_pro_tag(IREF ):=Z_ref_pro;   type_pro_tag(ITEXT):=Z_txt_pro;

            e_fnp_ass1(ISHOR):=Z_e_ass_sin1;  e_fnp_ass2(ISHOR):=Z_e_ass_sin2;
            e_fnp_ass1(IINTG):=Z_e_ass_int1;  e_fnp_ass2(IINTG):=Z_e_ass_int2;
            e_fnp_ass1(IREAL):=Z_e_ass_rea1;  e_fnp_ass2(IREAL):=Z_e_ass_rea2;
            e_fnp_ass1(ILONG):=Z_e_ass_lrl1;  e_fnp_ass2(ILONG):=Z_e_ass_lrl2;
            e_fnp_ass1(IBOOL):=Z_e_ass_boo1;  e_fnp_ass2(IBOOL):=Z_e_ass_boo2;
            e_fnp_ass1(ICHAR):=Z_e_ass_cha1;  e_fnp_ass2(ICHAR):=Z_e_ass_cha2;
            e_fnp_ass1(IREF ):=Z_e_ass_ref1;  e_fnp_ass2(IREF ):=Z_e_ass_ref2;
            e_fnp_ass1(ITEXT):=Z_e_ass_txt1;  e_fnp_ass2(ITEXT):=Z_e_ass_txt2;

            fnp_pro_1(ISHOR):=Z_f_pro_sin1;   fnp_pro_2(ISHOR):=Z_f_pro_sin2;
            fnp_pro_1(IINTG):=Z_f_pro_int1;   fnp_pro_2(IINTG):=Z_f_pro_int2;
            fnp_pro_1(IREAL):=Z_f_pro_rea1;   fnp_pro_2(IREAL):=Z_f_pro_rea2;
            fnp_pro_1(ILONG):=Z_f_pro_lrl1;   fnp_pro_2(ILONG):=Z_f_pro_lrl2;

            e_fnp_acc1(IBOOL):=Z_e_acc_boo1;  e_fnp_acc2(IBOOL):=Z_e_acc_boo2;
            e_fnp_acc1(ICHAR):=Z_e_acc_cha1;  e_fnp_acc2(ICHAR):=Z_e_acc_cha2;
            e_fnp_acc1(IINTG):=Z_e_acc_int1;  e_fnp_acc2(IINTG):=Z_e_acc_int2;
            e_fnp_acc1(ISHOR):=Z_e_acc_sin1;  e_fnp_acc2(ISHOR):=Z_e_acc_sin2;
            e_fnp_acc1(IREAL):=Z_e_acc_rea1;  e_fnp_acc2(IREAL):=Z_e_acc_rea2;
            e_fnp_acc1(ILONG):=Z_e_acc_lrl1;  e_fnp_acc2(ILONG):=Z_e_acc_lrl2;
            e_fnp_acc1(IREF ):=Z_e_acc_ref1;  e_fnp_acc2(IREF ):=Z_e_acc_ref2;
            e_fnp_acc1(ITEXT):=Z_e_acc_txt1;  e_fnp_acc2(ITEXT):=Z_e_acc_txt2;

            resulttag(ISHOR):= Z_sin_pro_va;  resulttag(IINTG):=Z_int_pro_va;
            resulttag(IREAL):= Z_rea_pro_va;  resulttag(ILONG):=Z_lrl_pro_va;
            resulttag(IBOOL):= Z_boo_pro_va;  resulttag(ICHAR):=Z_cha_pro_va;
            resulttag(IREF ):= Z_ref_pro_va;  resulttag(ITEXT):=Z_txt_pro_va;

            quantvarianttag(IINTG):= Z_quant_int;
            quantvarianttag(IPROC):= Z_quant_pro;
            quantvarianttag(IREF ):= Z_quant_pnt;
            quantvarianttag(ITEXT):= Z_quant_txt;
            quantvarianttag(IBOOL):= Z_quant_boo;
            quantvarianttag(ICHAR):= Z_quant_cha;
            quantvarianttag(ISHOR):= Z_quant_sin;
            quantvarianttag(IREAL):= Z_quant_rea;
            quantvarianttag(ILONG):= Z_quant_lrl;
            quantvarianttag(ILABE):= Z_quant_lab;
            quantvarianttag(IARRA):= Z_quant_arr;

            litpardesvarianttag(IINTG):= Z_lpardes_in;
            litpardesvarianttag(IREAL):= Z_lpardes_re;
            litpardesvarianttag(IBOOL):= Z_lpardes_bo;
            litpardesvarianttag(ICHAR):= Z_lpardes_ch;
            litpardesvarianttag(ITEXT):= Z_lpardes_tx;
            litpardesvarianttag(IREF ):= Z_lpardes_rf;
            litpardesvarianttag(ISHOR):= Z_lpardes_si;
            litpardesvarianttag(ILONG):= Z_lpardes_lr;

            fpt_profile(IBOOL):= Z_FPT_BOO1;  fpt_body(IBOOL):= Z_FPT_BOO2;
            fpt_profile(ICHAR):= Z_FPT_CHA1;  fpt_body(ICHAR):= Z_FPT_CHA2;
            fpt_profile(ISHOR):= Z_FPT_SIN1;  fpt_body(ISHOR):= Z_FPT_SIN2;
            fpt_profile(IINTG):= Z_FPT_INT1;  fpt_body(IINTG):= Z_FPT_INT2;
            fpt_profile(IREAL):= Z_FPT_REA1;  fpt_body(IREAL):= Z_FPT_REA2;
            fpt_profile(ILONG):= Z_FPT_LRL1;  fpt_body(ILONG):= Z_FPT_LRL2;
            fpt_profile(IREF ):= Z_FPT_REF1;  fpt_body(IREF ):= Z_FPT_REF2;
            fpt_profile(ITEXT):= Z_FPT_TXT1;  fpt_body(ITEXT):= Z_FPT_TXT2;

            if simob_entity or simob_descr
            then simob_ident:-new identtagtable;

%   ********   end of "initialize"   ************************

      detach;  ! Waiting for the first opc ;

      while opc=ISSWB or opc=IGO do
      begin if opc=ISSWB then outsetswitch(ssnuma,opi);
            detach;
      end;

%title ***   (former procedure:)  SCODESTART   ***

      begin !*** The initial S-Code of a Module ***;
            ref(module)rm;
            DEFCONST(progheadstring); outprogram(HASHINDEX);

            if separatecomp then
            begin if recomp then checkattrfile(notext!,true;); !***closeit;
                  ! checkattrfile is called only to obtain the oldcheckcode ;
                  ! to be used in the next call ;
                  ! It  should be changed so that the old checkcode is sent ;
                  ! from passB to passC ;
                  generatemodulehead(moduleident,
                                     if recomp then oldcheckcode
                                               else checkcode    );
            end else outmain;

            !*****   output inserts for RTS modules : ***********;
            for iii:=1 step 1 until lastmodule do
            begin rm:-moduletab(iii); outinstr(vsysinsert);
                  outstring(rm.moduleid); outstring(rm.checkcode);
                  outstring(questindex);  outtag(rm.basetag);
                  outtag(rm.basetag+rm.numoftags-1);
            end;

            if simob_descr then
            begin prototinfo:=lastusedtag:=lastusedtag+1;
                  outconstspec(prototinfo,Z_modinf);
            end;

            if separatecomp then
            begin ref(quantity) q;
                  q:-display(1!sepcomplev;).fpar;
                  while q.categ=char(IEXTR) do q:-q.next;
                  ! q denotes the declquant for the class/procedure being
                    separately compiled;
                  outdescriptors(display(1!sepcomplev;).declquant);
                  ! generates inserts for the external head and record
                    descriptors for the class/procedure                ;
                  nextexttag:=0; generatetagindexlist(q); outbody;
            end else
            begin outdescriptors(display(0).declquant);
                  SCF.outbyte(VLINE); SCF.out2byte(0);
                  outprecall(Z_b_prog1);
                  outpushcaddr(vcoaddr,Z_basicioptp);
                      ! basicioptp is a ptp-constant defined in RTS ;
                      ! Should later be changed to the tag of a FEC-generated
                        prototype for BASICIO;
                  outasspar; outcall(Z_b_prog2,0);
            end;
      end SCODESTART;

end of codegeneratorinit;

end SCODERINIT;
