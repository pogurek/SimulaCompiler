%      -----------------------------------------------------------------------
%      ---                                                                 ---
%      ---  COPYRIGHT 1985,86 by                                           ---
%      ---  Simula a.s.                                                    ---
%      ---  Oslo, Norway                                                   ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                 P O R T A B L E     S I M U L A                 ---
%      ---                                                                 ---
%      ---              F R O N T - E N D    C O M P I L E R               ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---              S - C o d e r  -  M n e m o n i c s                ---
%      ---                                                                 ---
%      ---                                                                 ---
%      -----------------------------------------------------------------------

% *********  Variables corresponding to Simuletta mnemonics *********
%DEFINE k_smp=0;
%DEFINE k_pro=1;
%DEFINE k_arr=2;
%DEFINE k_lab=3;
%DEFINE k_swt=4;
%DEFINE k_cla=5;
%DEFINE m_ref=0;
%DEFINE m_value=1;
%DEFINE m_name=2;
%DEFINE m_local=3;
%DEFINE t_notype=0;
%DEFINE t_boo=1;
%DEFINE t_cha=2;
%DEFINE t_sin=3;
%DEFINE t_int=4;
%DEFINE t_rea=5;
%DEFINE t_lrl=6;
%DEFINE t_ref=7;
%DEFINE t_txt=8;
%DEFINE s_txtent=9;
%DEFINE par_qnt_lit=0;
%DEFINE par_qnt_nas=1;
%DEFINE par_qnt_ass=2;
%DEFINE par_thk_nas=3;
%DEFINE par_thk_ass=4;

% *********  S - I N S T R U C T I O N S *********
%DEFINE vaccess     = 88;
%DEFINE vaccessv    =152;
%DEFINE vanone      = 24;
%DEFINE vasscall    =136;
%DEFINE vassign     =111;
%DEFINE vasspar     = 68;
%DEFINE vassrep     = 69;
%DEFINE vattr       =  4;
%DEFINE vbdest      = 56;
%DEFINE vbjump      = 90;
%DEFINE vbjumpif    = 92;
%DEFINE vbody       = 45;
%DEFINE vbseg       = 59;
%DEFINE vcaaddr     = 17;
%DEFINE vcall       = 70;
%DEFINE vcdot       = 21;
%DEFINE vcompare    =118;
%DEFINE vconst      = 53;
%DEFINE vconstspec  = 52;
%DEFINE vconvert    =113;
%DEFINE vcgaddr     = 19;
%DEFINE vcoaddr     = 18;
%DEFINE vcpaddr     = 20;
%DEFINE vcraddr     = 22;
%DEFINE vcrecord    = 10;
%DEFINE vcint       = 13;
%DEFINE vcsize      = 14;
%DEFINE vdeco       = 79;
%DEFINE vdelete     = 54;
%DEFINE vderef      = 73;
%DEFINE vdist       =110;
%DEFINE vdsize      =133;
%DEFINE vdup        = 83;
%DEFINE velse       = 64;
%DEFINE vempty      = 85;
%DEFINE vendif      = 65;
%DEFINE vendmodule  = 46;
%DEFINE vendprofile = 37;
%DEFINE vendprogram =132;
%DEFINE vendrecord  =  9;
%DEFINE vendskip    = 62;
%DEFINE veseg       = 60;
%DEFINE veval       =125;
%DEFINE vexisting   = 43;
%DEFINE vexport     = 35;
%DEFINE vexternal   = 33;
%DEFINE vfalse      = 29;
%DEFINE vfdest      = 55;
%DEFINE vfetch      = 71;
%DEFINE vfixrep     =  8;
%DEFINE vfjump      = 89;
%DEFINE vfjumpif    = 91;
%DEFINE vgetobj     = 87;
%DEFINE vglobal     = 50;
%DEFINE vgnone      = 26;
%DEFINE vgoto       = 94;
%DEFINE vif         = 63;
%DEFINE vimport     = 34;
%DEFINE vinco       = 78;
%DEFINE vindex      = 77;
%DEFINE vindexv     =151;
%DEFINE vinfo       =126;
%DEFINE vinit       = 51;
%DEFINE vinsert     =115;
%DEFINE vlabel      = 48;
%DEFINE vlabelspec  = 47;
%DEFINE vline       =127;
%DEFINE vlocate     = 76;
%DEFINE vmain       =131;
%DEFINE vmodule     = 42;
%DEFINE vnobody     = 23;
%DEFINE vnosize     =139;
%DEFINE vnowhere    = 27;
%DEFINE vonone      = 25;
%DEFINE vpop        = 84;
%DEFINE vpopall     =140;
%DEFINE vprecall    = 67;
%DEFINE vprefix     =  3;
%DEFINE vprofile    = 30;
%DEFINE vprogram    =130;
%DEFINE vpush       = 80;
%DEFINE vpushv      =148;
%DEFINE vpushc      = 81;
%DEFINE vpushlen    = 82;
%DEFINE vrecord     =  1;
%DEFINE vrefer      = 72;
%DEFINE vremote     = 75;
%DEFINE vremotev    =150;
%DEFINE vrep        =  6;
%DEFINE vrepcall    =141;
%DEFINE vrestore    = 58;
%DEFINE vrupdate    =135;
%DEFINE vsave       = 57;
%DEFINE vselect     = 74;
%DEFINE vselectv    =149;
%DEFINE vsetobj     = 86;
%DEFINE vsetswitch  =128;
%DEFINE vskipif     = 61;
%DEFINE vsysinsert  =114;
%DEFINE vtag        = 44;
%DEFINE vtext       = 11;
%DEFINE vtrue       = 28;
%DEFINE vupdate     =112;
%DEFINE vxor        =106;

% *********  Tags for Predefined Types  *********
%DEFINE ptbool=1;
%DEFINE ptchar=2;
%DEFINE ptint=3;
%DEFINE ptsint=4;
%DEFINE ptreal=5;
%DEFINE ptlreal=6;
%DEFINE ptaaddr=7;
%DEFINE ptoaddr=8;
%DEFINE ptgaddr=9;
%DEFINE ptpaddr=10;
%DEFINE ptraddr=11;
%DEFINE ptsize =12;

% *********   Displacements relative to some base tag   ********
%DEFINE quantdisp=0;
%DEFINE descriptordisp=0;
%DEFINE prototypedisp=1;
%DEFINE cntdisp=2;            ! For subblock ;
%DEFINE startdisp=2;          ! For procedure ;
%DEFINE dcldisp=2;            ! For class/pref.block;
%DEFINE stmdisp=3;
%DEFINE cnt_inrdisp=4;
% %DEFINE sequdisp=-1;  ! negative - can't handle that;
%DEFINE profiledisp=0;        ! For routine procedure ;
%DEFINE bodydisp=1;
%DEFINE contextdisp=2;
%DEFINE exportdisp=3;
%DEFINE indirectdisp=1;       ! For predefined with clf='W' ;
%DEFINE instrefdisp=3;
%DEFINE atrdesdisp=1;
% not used %DEFINE quickstmtdisp=?
% not used %DEFINE quickreturndisp=?

%MACRO checkasdzero:
% ***  Called from outeseg, outempty, outendskip, outlabeldef,
% ***  outgoto, outfjumipif, outfdest, outbdest, outbjump, expandrestore
       if asd <> 0 then asderror(481)
%ENDMACRO

%MACRO checkasdequal:
% ***  Called from outendif
       if asd <> asdstack(curasd) then asderror(482)
%ENDMACRO

%MACRO outinstr:
       SCF.outbyte(*/1)
%ENDMACRO

%MACRO outattrdef:
       begin outinstr(vattr); outtag(*/1); outtag(*/2); end
%ENDMACRO

%MACRO outendrecord:
       outinstr(vendrecord)
%ENDMACRO

%MACRO outrecordconst:
       begin outinstr(vcrecord); outtag(*/1); end
%ENDMACRO

%MACRO outattrconst:
       begin outinstr(vattr); outtag(*/1); outtag(*/2); end
%ENDMACRO

%MACRO outconstspec:
       begin outinstr(vconstspec); outtag(*/1); outtag(*/2); end
%ENDMACRO

%MACRO outconstdef:
       begin outinstr(vconst); outtag(*/1); outtag(*/2); end
%ENDMACRO

%MACRO outfixrep:
       begin outinstr(vfixrep); SCF.out2byte(*/1); end
%ENDMACRO

%MACRO outpushc:
       begin outinstr(vpushc); SCF.outbyte(*/1); asd:=asd+1; end 
%ENDMACRO

%MACRO outpush:
       begin outinstr(vpush); outtag(*/1); asd:=asd+1; end
%ENDMACRO

%MACRO outpushv:
       begin outinstr(vpushv); outtag(*/1); asd:=asd+1; end
%ENDMACRO

%MACRO outpushcaddr:
       begin outpushc(*/1); outtag(*/2); end
%ENDMACRO

%MACRO outpushcint:
       begin outinstr(vpushc); outinteger(*/1); asd:=asd+1; end
%ENDMACRO

%MACRO textval:
       begin outinstr(vtext); outlongstring(*/1); end
%ENDMACRO

%MACRO outcdot:
       begin outinstr(vcdot); outtag(*/1); end
%ENDMACRO

%MACRO outaddrconst:
       begin outinstr(*/1); outtag(*/2); end
%ENDMACRO

%MACRO outsizeconst:
       begin outinstr(*/1); outtag(*/2); end
%ENDMACRO

%MACRO outcompare:
       begin outinstr(vcompare);
             outinstr(vopc(*/1)); asd:=asd-1;
       end
%ENDMACRO

%MACRO outbinary:
       begin outinstr(vopc(*/1)); asd:=asd-1; end
%ENDMACRO

%MACRO outunary:
       outinstr(vopc(*/1))
%ENDMACRO

%MACRO outconvert:
       begin outinstr(vconvert); outtag(typetag(*/1)); end
%ENDMACRO

%MACRO outmain:
       outinstr(vmain)
%ENDMACRO

%MACRO outprogram:
       begin outinstr(vprogram); outstring(*/1); end
%ENDMACRO

%MACRO outendprogram:
       outinstr(vendprogram);
%ENDMACRO

%MACRO outbseg:
       begin outinstr(vbseg); pushasd; asd:=0; end
%ENDMACRO

%MACRO outeseg:
       begin outinstr(veseg); checkasdzero; popasd; end
%ENDMACRO

%MACRO outlocate:
       begin outinstr(vlocate); asd:=asd-1; end
%ENDMACRO

%MACRO outfetch:
       outinstr(vfetch)
%ENDMACRO

%MACRO outderef:
       outinstr(vderef)
%ENDMACRO

%MACRO outindex:
       begin outinstr(vindex); asd:=asd-1; end
%ENDMACRO

%MACRO outindexv:
       begin outinstr(vindexv); asd:=asd-1; end
%ENDMACRO

%MACRO outpop:
       begin outinstr(vpop); asd:=asd-1; end
%ENDMACRO

%MACRO outpopall:
       if asd <> 0 then
       begin outinstr(vpopall); SCF.outbyte(asd); asd:=0; end
%ENDMACRO

%MACRO outdup:
       begin outinstr(vdup); asd:=asd+1; end
%ENDMACRO

%MACRO outpushlen:
       begin outinstr(vpushlen); asd:=asd+1; end
%ENDMACRO

%MACRO outsave:
       begin outinstr(vsave); asd:=asd-1; end
%ENDMACRO

%MACRO outrestore:
       begin outinstr(vrestore); asd:=asd-1; end
%ENDMACRO

%MACRO outassign:
       begin outinstr(vassign); asd:=asd-2; end
%ENDMACRO

%MACRO outupdate:
       begin outinstr(vupdate); asd:=asd-1; end
%ENDMACRO

%MACRO outrupdate:
       begin outinstr(vrupdate); asd:=asd-1; end
%ENDMACRO

% %MACRO outempty:  !macro removed jan 87 - pje;
%        begin outinstr(vempty); checkasdzero;
%              if waitingline > 0 then
%              begin outline(waitingline); waitingline:=0; end;
%        end
% %ENDMACRO

%MACRO outeval:
       outinstr(veval)
%ENDMACRO

%MACRO outselect:
       begin outinstr(vselect); outtag(*/1); end
%ENDMACRO

%MACRO outselectv:
       begin outinstr(vselectv); outtag(*/1); end
%ENDMACRO

%MACRO outrefer:
       begin outinstr(vrefer); outtag(*/1); end
%ENDMACRO

%MACRO outremote:
       begin outinstr(vremote); outtag(*/1); end
%ENDMACRO

%MACRO outremotev:
       begin outinstr(vremotev); outtag(*/1); end
%ENDMACRO

%MACRO outaccess:
       begin outinstr(vaccess); SCF.outbyte(*/1);
             outtag(*/2); asd:=asd+1;
       end
%ENDMACRO

%MACRO outaccessv:
       begin outinstr(vaccessv); SCF.outbyte(*/1);
             outtag(*/2); asd:=asd+1;
       end
%ENDMACRO

%MACRO outskipif:
       begin outinstr(vskipif); outinstr(vopc(*/1));
             asd:=asd-2; pushasd;
       end
%ENDMACRO

%MACRO outendskip:
       begin outinstr(vendskip); checkasdzero; popasd; end
%ENDMACRO

%MACRO outif:
       begin outinstr(vif); outinstr(vopc(*/1));
             asd:=asd-2; pushasd;
       end
%ENDMACRO

%MACRO outelse:
       begin outinstr(velse); exchasd; end
%ENDMACRO

%MACRO outendif:
       begin outinstr(vendif); checkasdequal; popasd; end
%ENDMACRO

%MACRO outlabelspec:
       begin outinstr(vlabelspec); outtag(*/1); end
%ENDMACRO

%MACRO outlabeldef:
       begin outinstr(vlabel); outtag(*/1); checkasdzero; end
%ENDMACRO

%MACRO outgoto:
       begin outinstr(vgoto); asd:=asd-1; checkasdzero; end
%ENDMACRO

%MACRO outfjumpif:
       begin outinstr(vfjumpif); outinstr(vopc(*/1));
             SCF.outbyte(*/2); asd:=asd-2;
       end
%ENDMACRO

%MACRO outbjumpif:
       begin outinstr(vbjumpif); outinstr(vopc(*/1));
             SCF.outbyte(*/2); asd:=asd-2; indexused(*/2):=false;
       end
%ENDMACRO

%MACRO outfjump:
       begin outinstr(vfjump); SCF.outbyte(*/1); checkasdzero; end
%ENDMACRO

%MACRO outfdest:
       begin outinstr(vfdest); SCF.outbyte(*/1); checkasdzero;
             indexused(*/1):=false; end
%ENDMACRO

%MACRO outbdest:
       begin outinstr(vbdest); SCF.outbyte(*/1); checkasdzero; end
%ENDMACRO

%MACRO outbjump:
       begin outinstr(vbjump); SCF.outbyte(*/1); checkasdzero;
             indexused(*/1):=false; end
%ENDMACRO

%MACRO outdelete:
       begin outinstr(vdelete); outtag(*/1); checksavedstacks; end
%ENDMACRO

%MACRO outprecall:
       begin outinstr(vprecall); outtag(*/1); asd:=asd+1; end
%ENDMACRO

%MACRO outcall:
       begin outinstr(vcall); outtag(*/1); asd:=asd-1+*/2; end
%ENDMACRO

%MACRO outasscall:
       begin outinstr(vasscall); outtag(*/1); end
%ENDMACRO

%MACRO outasspar:
       begin outinstr(vasspar); asd:=asd-1; end
%ENDMACRO

%MACRO outassrep:
       begin outinstr(vassrep); SCF.outbyte(*/1); asd:=asd-*/1; end
%ENDMACRO

%MACRO outrepcall:
       begin outinstr(vrepcall); SCF.outbyte(*/1);
             outtag(*/2); asd:=asd-*/1+1;
       end
%ENDMACRO

%MACRO outmoduledefhead:
       begin outinstr(vmodule); outstring(*/1); outstring(*/2); end
%ENDMACRO

%MACRO outtagindex:
       begin outinstr(vtag); outtag(*/1); SCF.out2byte(*/2); end
%ENDMACRO

%MACRO outbody:
       outinstr(vbody)
%ENDMACRO

%MACRO outendmodule:
       outinstr(vendmodule)
%ENDMACRO

%MACRO outinfo:
       begin outinstr(vinfo); outstring(*/1); end
%ENDMACRO

%MACRO outline:
       begin outinstr(vline); SCF.out2byte(*/1); end
%ENDMACRO

%MACRO outsetswitch:
       begin outinstr(vsetswitch);
             SCF.outbyte(*/1); SCF.outbyte(*/2);
       end
%ENDMACRO

% END-OF-FILE: (FEC-105)SCODER:MNE
