External class COMMON;

COMMON class ERRMSG;
virtual: procedure ENDCOMP; ! - parameter later;
%      -----------------------------------------------------------------------
%      ---                                                                 ---
%      ---  COPYRIGHT 1985,86 by                                           ---
%      ---  Simula a.s.                                                    ---
%      ---  Oslo, Norway                                                   ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                 P O R T A B L E     S I M U L A                 ---
%      ---                                                                 ---
%      ---              F R O N T - E N D    C O M P I L E R               ---
%      ---                                                                 ---
%      ---                                                                 ---
%      ---                  E r r o r   M e s s a g e s                    ---
%      ---                                                                 ---
%      --- Selection switches: KI                                          ---
%      ---                                                                 ---
%      ---    'D' Included when dump is wanted                             ---
%      ---    'K' Included always when quick capability wanted             ---
%      ---    'P' Included to make compiler use quick procedures           ---
%      ---    'I' Included to make compiler use inserted mnemonics         ---
%      ---                                                                 ---
%      -----------------------------------------------------------------------
begin !*** external class ERRORTEXT;

%+I %INSERT (FEC-105)COMMON:MNE

      ref(ERRORTEXT) ERRTXT;

%title ***  Utility procedures  ***

      text procedure cat(t1,t2); !concatenate with blank if missing;
      text t1,t2;
      if t1==notext then cat:-t2 else if t2==notext then cat:-t1
      else begin
           if t1.sub(t1.length,1)<>" " and t2.sub(1,1)<>" "
           then t2:-conc(" ",t2);
           cat:-conc(t1,t2);
      end;

      text procedure errcat(i1,i2); short integer i1,i2;
           errcat:-cat(errmsg(i1),errmsg(i2));

      text procedure errcat3(i1,i2,i3); short integer i1,i2,i3;
           errcat3:-catTX(errcat(i1,i2),i3);

      text procedure catXT(i,t); short integer i; text t;
           catXT:-cat(errmsg(i),t);

      text procedure catTX(t,i); short integer i; text t;
           catTX:-cat(t,errmsg(i));

      text procedure catXTX(i1,t,i3); short integer i1,i3; text t;
           catXTX:-catXT(i1,catTX(t,i3));

% +P   prior
      text procedure qat(index,n);  short integer index,n;
      begin text t;
            t:-conc3("'",idname(index),"'");
            qat:-catTX(t,n);
      end;

%     ******   General Diagnostic Routines   ******

%+P   prior
      procedure GiveMessage(lnr,ec,t); integer lnr; short integer ec; text t;
      begin short integer i;
         if ec>1 or GiveNotes then begin
            if lnr=0 and currentpass='1' then lnr:=linenr;
            if ec>2 or lnr>0 then outtext(errmsg(290+ec));
            if (currentpass>'1' or ec>=3) and lnr>0 then begin !output lnr;
               i:=19; outtext(conc3("(l. ",leftint(lnr),") "));
            end else i:=pos+1;
       REP: if pos<i then setpos(i);
            if pos+t.length>81 then begin !break message;
               t.setpos(81-pos);
               while t.getchar<>' ' do t.setpos(t.pos-2); !there's always a SP;
               outtext(t.sub(1,t.pos-2)); outimage;
               t:-t.sub(t.pos,t.length-t.pos+1); goto REP;
            end else outtext(t);
            outimage;
            if ec=1 then numwarnfound:=numwarnfound+1 else
            if ec=2 then begin
               if numerrfound>maxerrno then goto ABORTCOM;
               numerrfound:=numerrfound+1;
               if termstatus<'5' then termstatus:='5'
            end
       else if ec>2 then begin
     ABORTCOM: if termstatus<'6' then termstatus:='6';  outimage;

               outtext(errmsg(297)); outimage;
               outtext(errmsg(294)); outimage;
%+D            sqrt(-1);
               ENDCOMP;
            end;
         end;
%+Z      RTS_Utility(1,0);
      end;

%+P   prior
      procedure openerror(fname);  text fname;
            GiveMessage(0,3,catXTX(287,fname,288));

%+P   prior
      procedure cannotproceed(n); short integer n;
            GiveMessage(linenr,3,catTX("CAPACITY EXCEEDED -",n));

%+P   prior
      procedure internalerror(n); short integer n;
            internerr(n,linenr);

%+P   prior
      procedure internerr(no,lnr); short integer no; integer lnr;
      begin
            GiveMessage(lnr,3,if numerrfound>0 then notext else errmsg(no));
      end;

% +P   prior
      text procedure errmsg(i); short integer i;
      if i<=0 then errmsg:-notext
      else begin
            if ERRTXT == none then ERRTXT:-new ERRORTEXT;
            errmsg:-ERRTXT.msg(i);
      end;


%title     ******   Pass2 Error Routines   ******

%+P   prior
      procedure fatalLTT(n1,n2); short integer n1,n2;
            GiveMessage(linenr,3,errcat(n1,n2));

%+P   prior
      procedure errLT(n); short integer n;
            GiveMessage(linenr,2,errmsg(n));

%+P   prior
      procedure errLTT(n1,n2); short integer n1,n2;
            GiveMessage(linenr,2,errcat(n1,n2));

%+P   prior
      procedure errLTTT(n1,n2,n3);
      short integer n1,n2,n3;
            GiveMessage(linenr,2,errcat3(n1,n2,n3));

%+P   prior
      procedure errLTTTT(i1,i2,i3,i4);
      short integer i1,i2,i3,i4;
            GiveMessage(linenr,2,cat(errcat(i1,i2),errcat(i3,i4)));

%+P   prior
      procedure errLTTNT(n,i1,t2,i3);
      short integer n,i1,i3; text t2;
            GiveMessage(linenr,2,catXTX(n,catXT(i1,t2),i3));

%+P   prior
      procedure errLTNTN(i1,t2,i3,t4);
      short integer i1,i3; text t2,t4;
            GiveMessage(linenr,2,cat(catXTX(i1,t2,i3),t4));

%+P   prior
      procedure errLTNT(n1,t2,n3);
      short integer n1,n3; text t2;
            GiveMessage(linenr,2,catXTX(n1,t2,n3));

%+P   prior
      procedure warnLT(n); short integer n;
            GiveMessage(linenr,1,errmsg(n));

%+P   prior
      procedure noteLT(n); short integer n;
            if GiveNotes then GiveMessage(linenr,0,errmsg(n));

%+P   prior
      procedure noteLTNT(n1,t2,n3);
      short integer n1,n3; text t2;
            if GiveNotes then GiveMessage(linenr,0,catXTX(n1,t2,n3));

%+P   prior
      procedure errLNT(t,n);
      text t; short integer n;
            GiveMessage(linenr,2,catTX(t,n));

%+P   prior
      procedure errLNTT(t,n2,n3);
      text t; short integer n2,n3;
            GiveMessage(linenr,2,cat(t,errcat(n2,n3)));

%+P   prior
      procedure errLTN(n,t);
      short integer n; text t;
            GiveMessage(linenr,2,catXT(n,t));

%+P   prior
      procedure errLTNTNT(n1,t2,n3,t4,n5);
      short integer n1,n3,n5; text t2,t4;
            GiveMessage(linenr,2,cat(catXTX(n1,t2,n3),catTX(t4,n5)));

%title ***  E r r o r    M e s s a g e s  ***
      class ERRORTEXT;
      begin text array msg(0:695);  !for uplim, see index of last message;
            short integer i;
            while i<695 do begin i:=i+1; msg(i):-"?internal error?"; end;

            !******  KEYWORDS  ******;
            msg(IACTV):-"'activate'";
            msg(IAFTR):-"'after'";
            msg(IAND ):-"'and'";
            msg(IARRA):-"'array'";
            msg(IAT  ):-"'at'";
            msg(IBEFO):-"'before'";
            msg(IBOOL):-"'boolean'";
            msg(ICHAR):-"'character'";
            msg(ICLAS):-"'class'";
            msg(IDELA):-"'delay'";
            msg(IELSE):-"'else'";
            msg(IEQ  ):-"'='";
            msg(IEQV ):-"'eqv'";
            msg(IEXTR):-"'external'";
            msg(IGE  ):-"'>='";
            msg(IGT  ):-"'>'";
            msg(IIMP ):-"'=>'";
            msg(IINTG):-"'integer'";
            msg(IFASG):-"':='";
            msg(IFDNO):-"':-'";
            msg(ILABE):-"'label'";
            msg(ILE  ):-"'<='";
            msg(ILONG):-"'long real'";
            msg(ILT  ):-"'<'";
            msg(INE  ):-"'<>'";
            msg(INOT ):-"'not'";
            msg(INOTY):-"'notype'";
            msg(IOR  ):-"'or'";
            msg(IPRIO):-"'prior'";
            msg(IPROC):-"'procedure'";
            msg(IREAC):-"'reactivate'";
            msg(IREAL):-"'real'";
            msg(IREF ):-"'ref'";
            msg(ISHOR):-"'short integer'";
            msg(ITEXT):-"'text'";
            msg(IPLUS):-"'+'";
            msg(IMINU):-"'-'";
            msg(IMULT):-"'*'";
            msg(ISLAS):-"'/'";
            msg(IPOWE):-"'**'";
            msg(IIDIV):-"'//'";
            msg(IASSG):-"':='";
            msg(IDENO):-"':-'";
            msg(IRFEQ):-"'=='";
            msg(IRFNE):-"'=/='";
            msg(IIDN ):-"simple";
            msg(IUMNS):-"'-'";
            msg(IUPLS):-"'+'";
            msg(IVIRT):-"'virtual'";
            msg(IFRMP):-"parameter";
            msg(IVALU):-"parameter";
            msg(INAME):-"parameter";
            msg(ISCST):-"text constant";
            msg(ITO  ):-"target";
            msg(IEEXP):-"expression";
            msg(IACTE):-"actual";

            msg(ICONC):-"'&'";
            msg(ICAND):-"'and then'";
            msg(ICOR) :-"'or else'";

            !******  SCANNER  ******;
            msg(201):-"invalid numerical constant";
            msg(202):-"missing '=' inserted";
            msg(203):-"misplaced character quote skipped";
            msg(204):-"invalid character constant";
            msg(205):-"missing text quote in line - inserted here";
            msg(206):-"illegal character skipped";
%           msg(207):-"TOO DEEP COPY";
            msg(208):-"%SLENGTH: argument > line length - directive ignored";
            msg(209):-"invalid compiler directive ignored";
%+M         msg(210):-"redefinition of mnemonic";
%+M         msg(211):-"illegal macro definition";
%+M         msg(212):-"illegal mnemonic definition";
            msg(213):-"'to' cannot occur alone, 'goto' assumed";
            msg(214):-"'short' cannot occur alone, short integer assumed";
            msg(215):-"'long' cannot occur alone, long real assumed";
            msg(216):-"'ref' cannot occur alone, '(' inserted";
            msg(217):-"'virtual' cannot occur alone, ':' inserted";
            msg(218):-"'go' cannot occur alone, 'goto' assumed";
            msg(219):-"illegal digit in radix-number replaced by zero";

            !******  PARSER  ******;
            msg(221):-"erroneous specification (specifier missing)";
            msg(222):-"invalid virtual specification ('procedure' assumed)";
            msg(223):-"')' expected";
            msg(224):-"identifier expected";
            msg(225):-"')' or ',' expected";
            msg(226):-"',' (comma) or '(' expected";
            msg(227):-"invalid bound";
            msg(228):-"expected ':' (colon) inserted";
            msg(229):-"expected ':=' inserted";
            msg(230):-"invalid designational expression";
            msg(231):-"invalid external declaration";
            msg(232):-"string expected";
            msg(233):-"expected ';' (semicolon) inserted";
            msg(234):-"'name' specification in class not allowed";
            msg(235):-"multiple 'name' specification not allowed";
            msg(236):-"multiple 'value' specification not allowed";
            msg(237):-"invalid blockprefix";
            msg(238):-"invalid left hand side of assignment (:=)";
            msg(239):-"invalid right hand side of assignment (:=)";
            msg(240):-"invalid left hand side of denote (:-)";
            msg(241):-"invalid right hand side of denote (:-)";
            msg(242):-"invalid statement";
            msg(243):-"multiple 'inner' not allowed";
            msg(244):-"invalid start/termination of statement/declaration";
            msg(245):-"invalid expression";
            msg(246):-"'do' expected";
%           msg(247):-"msg(247)";
            msg(248):-"'then' expected";
            msg(249):-"'else' is not allowed here";
            msg(250):-"':='  or  ':-'  expected";
            msg(251):-"'until' expected";
            msg(252):-"'do' or 'when' expected";
            msg(253):-"misplaced 'inner' ignored";
            msg(254):-"illegal outermost statement";
%           msg(255):-msg(264);
%           msg(256):-"msg(256)";
            msg(257):-"the statement/expression nesting is too deep";
            msg(258):-"if-statement illegal in this context";
            msg(259):-"illegal specification of virtual procedure";
            msg(260):-"misplaced declaration";
            msg(261):-"only extern.,proc. or class decl. legal here";
            msg(262):-"misplaced value/name part";
            msg(263):-"misplaced type spec.part";
            msg(264):-"text after final 'end' (missing 'begin'?)";
            msg(265):-"'(' expected";
            msg(266):-"declaration after statement";
            msg(267):-"incomplete program when end of file encountered";
            msg(271):-"'then' followed by 'if' not allowed";
            msg(272):-"'else' expected";
            msg(273):-"not matching parantheses";
            msg(274):-"operand expected";
            msg(275):-"incomplete expression";
            msg(276):-"external binding of class not allowed";
            msg(277):-"body of external binding not empty";
            msg(278):-"'procedure' expected";
            msg(279):-"illegal type specification";
                      !      "in external declaration with binding";
            msg(280):-"non-Simula procedure in external head";
            msg(281):-"specified identifier is not parameter";
            msg(282):-"parameter has double specification";
%+K         msg(283):-"misplaced 'prior' skipped";
%+K         msg(284):-"'prior' proc cannot be sep. comp.";
%           msg(285):-"main program is not allowed to have external head";

            !******  Error handler itself  ******;

            msg(286):-"recovery impossible";
            msg(287):-"the file";
            msg(288):-"cannot be opened";
            msg(289):-"- LISTING SUPPRESSED";
            msg(290):-"Note!: ";  !code 0;
            msg(291):-"Warn.: ";  !code 1;
            msg(292):-"ERROR: ";  !code 2;
            msg(293):-"FATAL: ";  !code 3;
            msg(294):-"- please correct indicated error(s) and try again!";
            msg(295):-"(compiler scratch file)";
            msg(296):-"- SYNTAX CHECKING ONLY";
            msg(297):-"*** COMPILATION STOPPED: too many errors, "
                      "or error recovery is impossible";

            !******  BUILDER1  ******;
            msg(298):-"'protected' ignored - no such attribute: ";
            msg(299):-"'hidden' ignored - no such attribute: ";
            msg(300):-"'hidden' ignored, not 'protected': ";
            msg(301):-"has unusable/undef. prefix:";
            msg(302):-"has prefix at wrong level:";
            msg(303):-"has circular prefix chain";
            msg(304):-"Too deep nesting of blocks";

            !******  BUILDER2  ******;
%+K         msg(305):-"msg(305)";  !"block local to quick procedure";
            msg(306):-"'this' used in prefix of pref.block";
            msg(307):-"Prefix has wrong level";
%           msg(308):-"msg(308)";
            msg(309):-"is a redeclaration of";
            msg(310):-"is unspecified parameter";
            msg(311):-"is illegal parameter to class";
            msg(312):-"is illegal parameter to ext.bound.proc";
            msg(313):-"cannot be passed by value";
            msg(314):-"is name parameter to class";
            msg(315):-"is ext. bound proc. without language";
            msg(316):-"is ext.bound proc with illegal type 'ref'";
            msg(317):-"has unknown qualification";
            msg(318):-"has illegal qualification";
            msg(319):-"is virtual respec. of";
            msg(320):-"is illegal virtual";
%           msg(321):-"msg(321)";
            msg(322):-"is not legal match for";
% +K        msg(323):-"inspect local to quick procedure";
            msg(324):-"Attribute file read error:";
            msg(325):-"compiled with different versions";
            msg(326):-"collides with implicit declaration from";
            msg(327):-"The compiler version used for this compilation is"
                      " out of date!!!";
            msg(328):-"but they are not compatible (different checkcodes)";
            msg(329):-"incompatibly recompiled since";
%           msg(330):-"msg(330)";
%           msg(331):-"msg(331)";
%           msg(332):-"msg(332)";
            msg(333):-"collides with implicit ext. decl. in";
            msg(334):-"collides with ext. decl. in";
            msg(335):-"is not compatible (different checkcodes) with";
            msg(336):-"external declaration in";
            msg(337):-"has another identifier on attr. file";
            msg(338):-"attribute file '";
            msg(339):-"' empty at recompilation";
            msg(340):-"recompilation error:";
            msg(341):-"file '";
            msg(342):-"' is not an attribute file";
            msg(343):-"old module ident '";
            msg(344):-"' different from";
            msg(345):-"new module ident '";
            msg(346):-"' in recompilation";
            msg(347):-"incompatible recompilation";
            msg(348):-"caused recompilation to be incompatible -";

            !******  CHECKER1  ******;
            msg(349):-"missing actual parameters";
            msg(350):-"missing indices";
            msg(351):-"are incompatible in";
%           msg(352):-"msg(352)";
            msg(353):-"type incompatible operand";
            msg(354):-"left of";
            msg(355):-"right of";
%           msg(356):-"constant compared with constant, may be a typing error";
            msg(357):-"illegal type";
            msg(358):-") right of  ':-'";
            msg(359):-"non-reference expression preceding 'in'";
            msg(360):-"non-reference expression preceding 'is'";
            msg(361):-"...IN '";
            msg(362):-"...IS '";
            msg(363):-"' will always be false";
            msg(364):-"' will always be true except for ...==none";
            msg(365):-"'qua'";
            msg(366):-"not preceded by reference expression";
            msg(367):-"... QUA '";
            msg(368):-"' will be equal to none test only";
            msg(369):-" illegal qualification of";
            msg(370):-"non-class identifier in 'this'";
            msg(371):-"illegal 'this";
            msg(372):-"' in array bound";
            msg(373):-"local object 'this";
            msg(374):-"' within prefixed block";
            msg(375):-"'  out of place";
            msg(376):-"illegal type 'ref' left of ':='";
            msg(377):-"illegal type 'ref' right of ':='";
            msg(378):-"the left hand side of assignment is constant";
%           msg(379):-"msg(379)";
            msg(380):-"notype procedure identifier left of :=";
            msg(381):-"of illegal kind 'procedure' left of :=";
            msg(382):-"of illegal kind 'array' left of :=";
            msg(383):-"of illegal kind 'label' left of :=";
            msg(384):-"of illegal kind 'switch' left of :=";
            msg(385):-"of illegal kind 'class' left of :=";
            msg(386):-"of illegal kind left of :=";
            msg(387):-"illegal target in ':='";
            msg(388):-"'notext' as target in ':='";
            msg(389):-"non-ref (";
            msg(390):-") left of  ':-'";
            msg(391):-"incompatible with";
            msg(392):-"qualification error in  ':-'";
            msg(393):-"notype procedure identifier left of :-";
            msg(394):-"of illegal kind 'procedure' left of :-";
            msg(395):-"of illegal kind 'array' left of :-";
            msg(396):-"of illegal kind 'label' left of :-";
            msg(397):-"of illegal kind 'switch' left of :-";
            msg(398):-"of illegal kind 'class' left of :-";
            msg(399):-"of illegal kind left of :-";
            msg(400):-"illegal target in ':-'";
            msg(401):-"non-boolean if-clause expression";
            msg(402):-"no prefix in common with";
            msg(403):-"in conditional ref expression";
            msg(404):-"undeclared identifier";
%           msg(405):-"connected label";
%           msg(406):-"connected switch";
%+K         msg(407):-"is quick procedure,";
% +K        msg(408):-"cannot be called through inspection";
            msg(409):-"local attribute '";
            msg(410):-"' used in array bound";
            msg(411):-"virtual '";
            msg(412):-"illegal use or definition of named constant";
            msg(413):-"non-reference expression before dot";
            msg(414):-"improper reference expression before dot";
            msg(415):-"illegal use of dot (local classes)";
            msg(416):-"illegal array bound expression";
            msg(417):-"not attribute of";
            msg(418):-"remote label";
            msg(419):-"remote switch";
% +K        msg(420):-"cannot be called remotely";
            msg(421):-"invalid prefix";
            msg(422):-"missing arguments";
            msg(423):-"should not have arguments";
            msg(424):-"missing new before";
            msg(425):-"too many arguments applied to";
            msg(426):-"too few arguments applied to";
            msg(427):-"expected number:";
            msg(428):-"function call assumed for system procedure '";
            msg(429):-"system defined procedure '";
            msg(430):-"' passed as parameter";
            msg(431):-"wrong kind";
            msg(432):-"of actual parameter";
            msg(433):-"actual array type";
            msg(434):-"not coincident with formal type";
            msg(435):-"actual procedure not subordinate to formal";
            msg(436):-"actual parameter of no type";
            msg(437):-"incompatible with formal type";
            msg(438):-"actual parameter of type";
            msg(439):-"incompatible with formal no type";
            msg(440):-"actual type";
            msg(441):-"incompatible qualification";
            msg(442):-"constant as actual parameter to name parameter to";
%           msg(443):-"msg(443)";
            msg(444):-"external non-Simula procedure";
            msg(445):-"expression as actual parameter to";
            msg(446):-"non-label switch element  '";
            msg(447):-"illegal mode 'name'";
            msg(448):-"of controlled variable";
            msg(449):-"illegal kind";
            msg(450):-"non-boolean exp after 'while'";
            msg(451):-"non-arithmetic exp after 'step'";
            msg(452):-"non-arithmetic exp after 'until'";
            msg(453):-"non-class identifier";
            msg(454):-"'activate'/'reactivate' not allowed without "
                      "'simulation' as prefix to program";
%           msg(455):-"msg(455)";
            msg(456):-"non-ref expression after '(re)activate'";
            msg(457):-"is not a subclass of 'process'";
            msg(458):-"Number of actuals to formal/virtual are different";
%           msg(459):-"msg(459)";
            !******  CHECKER2  ******;
            msg(460):-"text concatenation is not implemented. An attempt is "
                      "made to complete semantic checking";
            msg(461):-"array dimension greater than 10";
            msg(462):-"non-designational exp after 'goto'";
            msg(463):-"non-boolean expression after 'if'/'while'";
            msg(464):-"misplaced array identifier";
            msg(465):-"misplaced switch identifier";
            msg(466):-"misplaced simple variable";
            msg(467):-"misplaced label identifier";
            msg(468):-"misplaced subscripted variable";
            msg(469):-"misplaced switch designator";
            msg(470):-"missing 'new' before";
            msg(471):-"misplaced expression";
            msg(472):-"non-reference expression after 'inspect'";
            msg(473):-"non-class identifier '";
            msg(474):-"' after 'when'";
            msg(475):-"when branch 'when";
            msg(476):-"' will never be executed";
            msg(477):-"non-arithmetic exp after";
            !******  SCODER1  ******;
            msg(478):-"saved stack not empty";
            msg(479):-"** NOT YET IMPLEMENTED:";
            msg(480):-"General switch not impl. or STACK DEPTH ERROR:";
            msg(481):-"stackdepth not zero";
            msg(482):-"stackdepths not equal";

            !******  SCODER2  ******;
            !******  SCODER3  ******;
            msg(483):-"label parameter as parameter to";
            msg(484):-"external '";
            msg(485):-"' procedure";
            msg(486):-"non-local label as parameter to";
%           msg(487):-"msg(487)";

            !******  SCODER4  ******;
%+K         msg(488):-"call on 'prior': SAVE emitted, called as normal";
            msg(489):-"for-list with a single expression element only:";
            msg(490):-"'loop' with no iteration";
            msg(491):-"Step is zero: infinite loop";


            !******  RECOMPILATION  ******;
            msg(499):-cat(msg(344),msg(345));
            msg(500):-"not an attribute file";
            msg(501):-"different block levels";
            msg(502):-"different versions";
            msg(504):-"different kind of attribute file";
            msg(505):-"array bounds changed, or named constant";
            msg(506):-"wrong format on attribute file";
            msg(507):-"different external tags";
%           msg(508):-msg(506);
            msg(509):-"type change";
            msg(510):-"kind change";
            msg(511):-"different category";
            msg(512):-"different identifier";
            msg(513):-"different prefix";
            msg(514):-"different dimensions";
            msg(515):-"'this' used in recompiled class, but not in old";
            msg(516):-"different language for external";
            msg(517):-"different external identification";
            msg(518):-"different module identifier";
            msg(519):-"wrong checkcode";
            msg(520):-"wrong classification";
            msg(521):-"different external tags";
            msg(522):-"changed overload marker (SYSTEM ERROR)Q";
            msg(523):-"different number of tags";
            msg(524):-"different module indication";
            msg(525):-"different external tags in module";
            msg(526):-msg(505);
            msg(527):-"attribute protection changed";
%           msg(528):-msg(508);
            msg(530):-"different nesting of for statements";
            msg(531):-"different nesting of inspect statements";


            !*** Compiler capacity exceeded / internal error***;
%           msg(551):-"msg(551)";
            msg(552):-"error in declaration structure";
            msg(553):-"too many textual blocks (blno)";
%           msg(554):-"msg(554)";
            msg(555):-"block nesting is too deep";
  !?;       msg(556):-"mysterious categ (COMPILER ERROR)";
            msg(557):-"wrong format on attribute file";
%           msg(558):-"exp not ident in checkasexp";
            msg(559):-"strange kind left of ':='";
            msg(560):-"strange kind left of ':-'";
            msg(561):-"strange cl. identifier.emit";
            msg(562):-"strange cl. argumented.emit";
            msg(563):-"strange ident.kind argumented.emit";
            msg(564):-
            msg(565):-"actual was not identifier";
            msg(566):-"formals(cblev)==none in leave-block";
            msg(567):-"exptop==none in unstack";
            msg(568):-"abnormal termination of expr in unstack";
            msg(569):-"wrong operator to unstack";
            msg(570):-"illegal kind at IESTM";
            msg(571):-"illegal argumented.kind at IESTM";
            msg(572):-"error in module structure";
            msg(573):-"too many modules in system";
            msg(574):-"asd overflow";
%           msg(575):-"typetagerror";
%           msg(576):-"unexpected variant in quantvarianttag";
            msg(577):-"too deep procedure call nesting";
            msg(578):-"calldepth underflow";
            msg(579):-"all indices used";
            msg(580):-"jumpdepth overflow";
%           msg(581):-"rtstypecode error";
%           msg(582):-"rtskind error";
%           msg(583):-"rtsmode error";
%           msg(584):-"rtsblockkind error";
%           msg(585):-"rtsrelcode error";
%           msg(586):-"mysterious categ in qntdescriptor";
            msg(587):-"wrong virtual";
            msg(588):-"SYMBOL TABLE OVERFLOW - too many literals and "
                      "identifiers";
            msg(589):-"LIIDN";
            msg(590):-"IDOT";
%           msg(591):-"strange actual parameter to name";
            msg(592):-"illegal actual parameter";
%           msg(593):-
%           msg(594):-"wrong type opt in power";
%           msg(595):-
%           msg(596):-"wrong type optx in power";
%           msg(597):-"illegal kind proceeding ':='";
            msg(598):-"LIBLKB";
            msg(599):-"*LIEND*";
            msg(600):-"'-1' expected on jumpstack (coding of for-statement)";
%           msg(601):-"dot-text";
%           msg(602):-"dot-in";
%           msg(603):-"testifcall";
%           msg(604):-
%           msg(605):-msg(594);
%           msg(606):-"RTS not found in RTSversion";
%           msg(607):-"'.' not found in RTSversion";
%           msg(608):-"FEC not found in FECversion";
%           msg(609):-"'.' not found in FECversion";
%           msg(610):-
%           msg(611):-
            msg(612):-"ne * in instring";
%           msg(613):-"inblevplevid";


%           msg(621):-"set-encl-block-descr";
%           msg(622):-"prototypegenerator: actual-block-descr==none";
%           msg(623):-msg(621);
%           msg(624):-msg(622);

%           msg(654):-"simob-descr=true, but no extbrecord for Simob found";

%           msg(663):-"msg(663)";
%           msg(664):-"Too many subblocks local to the same block";
%           msg(665):-
%           msg(666):-"msg(666)";
%           msg(667):-"non-procedure kind in boolean procedure result";
%           msg(668):-"type-pro-tag";
            msg(669):-"qty==none in generation of refatrdes for parameter";
%           msg(670):-"wrong type in resulttag";
            msg(671):-"illegal classification of procedure";
            msg(672):-"tagstack overflow";
            msg(673):-"tagstack underflow";
%           msg(674):-"e-fnp-ass1";
%           msg(675):-"e-fnp-ass2";
            msg(676):-msg(600);
%           msg(677):-"step-fast constant not of type integer";
%           msg(678):-"until-fast constant not of type integer";
            msg(679):-"until identifier of wrong kind/categ "
                      "(name parameter not implemented yet)";
            msg(680):-"no fast-until expression";
            msg(681):-msg(600);
%           msg(682):-"wrong type of parameter to procedure fpt-profile";
%           msg(683):-"wrong type of parameter to procedure fpt-body";
            msg(684):-"LIARDE"; !cannot occur? - see scoder4 l.473;

%           msg(694):-"e-fnp-acc1";
%           msg(695):-"e-fnp-acc2";
      end ERRORTEXT;

end ERRMSG;
