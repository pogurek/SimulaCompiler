 Global COMN("RTS 105");
 begin
       -----------------------------------------------------------------------
       ---                                                                 ---
       ---  COPYRIGHT 1985 by                                              ---
       ---  Simula a.s.                                                    ---
       ---  Postboks 335, Blindern                                         ---
       ---  N-0314 Oslo 3, Norway                                          ---
       ---                                                                 ---
       ---                                                                 ---
       ---                                                                 ---
       ---                 P O R T A B L E     S I M U L A                 ---
       ---                                                                 ---
       ---                  R U N T I M E     S Y S T E M                  ---
       ---                                                                 ---
       ---                                                                 ---
       ---                                                                 ---
       ---                                                                 ---
       ---              G l o b a l     D e f i n i t i o n s              ---
       ---                                                                 ---
       ---                                                                 ---
       ---                                                                 ---
       ---                                                                 ---
       -----------------------------------------------------------------------
%page
Visible define
      MAX_ACT = 5 ,
      ACT_USR      = 0 ,     -- Normal user system execution.
      ACT_SMB      = 1 ,     -- Execution of Simob.
      ACT_ERR      = 2 ,     -- Printing of error report and dumps from RTS.
      ACT_TRM      = 3 ,     -- Fast controlled termination after error.
      ACT_INI      = 4 ,     -- Initialisation of the program execution.
      ACT_GC       = 5 ,     -- Garbage collection (with invalid pointers).

      MAX_KIND = 5 ,
      K_SMP = 0 ,      -- simple kind
      K_PRO = 1 ,      -- procedure kind
      K_ARR = 2 ,      -- array kind
      K_LAB = 3 ,      -- label kind
      K_SWT = 4 ,      -- switch kind
      K_CLA = 5 ,      -- class kind (SIMOB only)

      MAX_MODE = 4 ,
      M_REF       = 0 ,      -- reference parameter
      M_VALUE     = 1 ,      -- value parameter
      M_NAME      = 2 ,      -- name parameter
      M_LOCAL     = 3 ,      -- local quantity
      M_EXTR      = 4 ,      -- external quantity (SIMOB only)

      MAX_TYPE = 8 ,
      T_NOTYPE = 0 ,     -- no type
      T_BOO = 1 ,        -- boolean
      T_CHA = 2 ,        -- character
      T_SIN = 3 ,        -- short_integer
      T_INT = 4 ,        -- integer
      T_REA = 5 ,        -- real
      T_LRL = 6 ,        -- long real
      T_REF = 7 ,        -- reference quantity
      T_TXT = 8 ,        -- text descriptor

      MAX_SORT = 21 ,
      --  Instance sorts:
      S_NOSORT =  0 ,  --  no sort
      S_SUB    =  1 ,  --  Sub-Block
      S_PRO    =  2 ,  --  Procedure
      S_ATT    =  3 ,  --  Attached Class
      S_DET    =  4 ,  --  Detached Class
      S_RES    =  5 ,  --  Resumed Class
      S_TRM    =  6 ,  --  Terminated Class
      S_PRE    =  7 ,  --  Prefixed Block
      S_THK    =  8 ,  --  Thunk
      --  Special entity sorts:
      S_TXTENT =  9 ,  --  Text Entity
      S_ARHEAD = 10 ,  --  Array Head Entity
      S_ARBODY = 11 ,  --  Array Body Entity      (three or more dimensions)
      S_ARBREF = 12 ,  --  ref-Array Body Entity  (three or more dimensions)
      S_ARBTXT = 13 ,  --  text-Array Body Entity (three or more dimensions)
      S_ARENT2 = 14 ,  --  Array Body Entity      (two dimensions)
      S_ARREF2 = 15 ,  --  ref-Array Body Entity  (two dimensions)
      S_ARTXT2 = 16 ,  --  text-Array Body Entity (two dimensions)
      S_ARENT1 = 17 ,  --  Array Body Entity      (one dimension)
      S_ARREF1 = 18 ,  --  ref-Array Body Entity  (one dimension)
      S_ARTXT1 = 19 ,  --  text-Array Body Entity (one dimension)
      S_SAV    = 20 ,  --  Save Object Entity
      S_GAP    = 21 ,  --  Dynamic Storage Gap Entity

      MAX_FIL = 7 ,
      FIL_FILE = 0 ,      -- FILE
      FIL_IN = 1 ,        -- Infile
      FIL_OUT = 2 ,       -- Outfile
      FIL_PRT = 3 ,       -- Printfile
      FIL_DIR = 4 ,       -- Directfile
      FIL_INBYTE = 5 ,    -- Inbytefile
      FIL_OUTBYTE = 6 ,   -- Outbytefile
      FIL_DIRBYTE = 7 ,   -- Directbytefile

      MAX_PAR = 4 ,
      PAR_QNT_LIT = 0, --  the actual parameter is a compile-time constant.
      PAR_QNT_NAS = 1, --  the actual parameter is a simple attribute
                       --  which is non-assignable.
      PAR_QNT_ASS = 2, --  the actual parameter is a simple attribute
                       --  which is assignable.
      PAR_THK_NAS = 3, --  the actual parameter is an expression which
                       --  evaluates to a non-assignable attribute or
                       --  quantity.
      PAR_THK_ASS = 4, --  the actual parameter is an expression
                       --  which evaluates to an assignable attribute.

      MAX_OLV = 2 ,
      OLV_NO = 0 ,              -- No attribute
      OLV_BLK = 1 ,             -- Block (e.g. procedure or class)
      OLV_VAL = 2 ,             -- Value attribute (simple or array,
                                -- local variable or parameter)

      MAX_BLK = 5,              -- Type of block.
      BLK_SUB = 0 ,             -- sub-block
      BLK_PRO = 1 ,             -- notype procedure
      BLK_FNC = 2 ,             -- type procedure
      BLK_CLA = 3 ,             -- class
      BLK_PRE = 4 ,             -- prefixed block
      BLK_THK = 5 ,             -- thunk

      MAX_EXC = 14 ,

      MAX_EVT = 4 ,

      MAX_2BT = 65535 ,   -- Value of a double-byte
      MAX_ATR = 32000 ,   -- Number of attributes per instance
      MAX_BND = 20 ,      -- 2 * MAX_DIM (array bounds)
      MAX_BUF = 255 ,     -- Length of editing buffer
      MAX_BYT = 255 ,     -- Value of a byte
      MAX_CLV = 32 ,      -- Connection level
      MAX_DIM = 10 ,      -- Number of array dimensions
      MAX_EDT = 72 ,      -- Size in characters of editing buffer.
      MAX_ENO = 130 ,     -- Error number
      MAX_KEY = 255 ,     -- Number of file-keys
      MAX_PLV = 63 ,      -- Prefix level
      MAX_PNT = 32000 ,   -- Number of references per instance
      MAX_RBL = 127 ,     -- Relative static block level
      MAX_SPC = 255 ,     -- Value of printfile.spacing
      MAX_STS = 36 ,      -- Error status from environment
      MAX_TXT = 32000 ,   -- Number of characters in a text object
      MAX_TRC = 10 ,      -- Trace Level
      MAX_VER = 127 ,     -- Version numbers (both level and revision)
      MAX_VIR = 32000    -- Number of virtuals per entity
;
%title ******   I n t e r f a c e   ******

 Visible record string;  info "TYPE";
 begin name(character)   chradr;
       integer           nchr;
 end;

 Visible global profile PEXCHDL;
 import range(0:MAX_EXC) code;
        infix(string) msg;
        label addr;
 export label cont;
 end;


 Visible global profile PINIERR;
 import range(0:MAX_ENO) eno;
        ref(filent) fil;
 end;

 Visible global profile PSIMOB;
 import integer code;
        ref(entity) ent1,ent2;
 end;

 --  Start of variables etc.,  CURINS must be first (as wanted by QZ) --

 Visible ref(instance) curins       system CURINS;
 Visible range(0:MAX_STS) status    system STATUS;
 Visible range(0:MAX_TXT) itemsize  system ITSIZE;
 Visible const size maxlen          system MAXLEN;
 Visible const integer inptlinelng  system INPLTH;
 Visible const integer ouptlinelng  system OUTLTH;
 Visible ref(basicio) bio           system BIOREF;
 Visible infix(quant) tmp           system TMPQNT;
 Visible integer maxint             system MAXINT;
 Visible integer minint             system MININT;
 Visible integer maxrank            system MAXRNK;
 Visible real maxreal               system MAXREA;
 Visible real minreal               system MINREA;
 Visible long real maxlreal         system MAXLRL;
 Visible long real minlreal         system MINLRL;

 Visible entry(PINIERR) err_ini;
 Visible entry(PSIMOB) smb;

 Visible range(0:MAX_ACT) act_lvl;
 Visible ref() rstr;                 --  Used by RESTORE only

 Visible define inlng = 80;          -- Input file's line length
 Visible define utlng = 80;          -- Output file's line length

 Visible integer pgleft;             -- SIMOB-page lines left to write
 Visible integer pgsize;             -- SIMOB-page lines per page
 Visible long real smltim;           -- SIMOB-temp 'old' simulation time
 Visible integer utpos;              -- Current output line's pos (0..utlng-1)
 Visible character utbuff(utlng);    -- The output buffer
 Visible character inbuff(inlng);    -- The input buffer
 Visible character dumbuf(4);        -- Dummy input buffer (full page)

 Visible const infix(string)
       nostring=record:string(nchr=0,chradr=noname);

 Visible const infix(txtqnt)
       notext=record:txtqnt(sp=0,lp=0,cp=0,ent=none);

 Visible infix(txtqnt) txttmp;       -- inline-coded text attr. procs use this
%title ******   P r o t o t y p e s   ******
 Visible record ptp;
 begin ref(pntvec) pnt_vec;
       ref(extptp) xpp;
       size lng;
 end;

 Visible record sub_ptp:ptp;
 begin label cnt end;

 Visible record pro_ptp:ptp;
 begin label start;
       ref(atrvec) par_vec;
 end;

 Visible record cla_pre_ptp:ptp;
 begin range(0:MAX_PLV) plv;
       label dcl,stm,cnt_inr;
       ref(virvec) vir_vec;
       ref(cla_pre_ptp) prefix(0);
 end;

 Visible record pntvec;
 begin range(0:MAX_CLV)    ncon;
       range(0:MAX_PNT)    npnt;
       field()             pnt(0);
 end;

 Visible record virvec;
 begin range(0:MAX_VIR)   nvir;
       infix(virdes)      vir(0);
 end;

 Visible record virdes;   info  "TYPE";
 begin variant ref(pro_ptp)     ppp; --  procedure
               ref(cla_pre_ptp) qal;
       variant label            pad; --  label
       variant ref(swtdes)      des; --  switch
 end;

 Visible record atrvec;
 begin range(0:MAX_ATR)   natr;
       ref(atrdes)        atr(0);
 end;

 Visible record atrdes;
 begin ref(identifier)       ident;
       field()               fld;
       range(0:MAX_MODE)     mode;
       range(0:MAX_KIND)     kind;
       range(0:MAX_TYPE)     type;
 end;

 Visible record refatrdes:atrdes;
 begin range(0:MAX_RBL)       rbl;
       field(ref(instance))   con;
       ref(cla_pre_ptp)       qal;
 end;

 Visible record swtdes;
 begin integer          nelt;
       infix(swtelt)   elt(0);
 end;

 Visible record swtelt; info  "TYPE";
 begin boolean          thk;
       label            pad;
       range(0:MAX_RBL) rbl;
       field()          fld;
       range(0:MAX_CLV) clv;
 end;
%title ******   E  n  t  i  t  i  e  s   ******

 Visible record entity;  info "DYNAMIC";
 begin ref(instance)      sl;
       ref(entity)       gcl;
       range(0:MAX_SORT)  sort;
       variant ref(ptp) pp;
       variant size lng;
 end;

 Visible record instance:entity;
 begin ref(instance) dl;
       label lsc;
 end;

 Visible record boo_pro:instance; begin boolean       val end;
 Visible record cha_pro:instance; begin character     val end;
 Visible record sin_pro:instance; begin short integer val end;
 Visible record int_pro:instance; begin integer       val end;
 Visible record rea_pro:instance; begin real          val end;
 Visible record lrl_pro:instance; begin long real     val end;
 Visible record ref_pro:instance; begin ref(instance) val end;
 Visible record txt_pro:instance; begin infix(txtqnt) val end;

 Visible record thunk:instance;
 begin boolean fp_is_smp;
       infix(quant) val;
 end;

 Visible record savent:instance;
 begin  end;

 Visible record filent:instance;
 begin ref(filent)        prd;
       ref(filent)        suc;
       infix(txtqnt)      nam;
       infix(txtqnt)      img;
       integer            loc;
   --  integer            lastloc;    removed jan 87 pje
   --  integer            maxloc;     removed jan 87 pje
       integer            bsize;
       range(0:MAX_FIL)   type;
       range(0:MAX_KEY)   key;
       boolean            eof;
       boolean            locked;
       range(0:MAX_KEY)   trc;  -- 0:no trace, >0:index to trace table
 end;

 Visible record pfilent:filent;
 begin integer   spc;
       integer   lpp;
       integer   lin;
       integer   pag;
 end;

 Visible record basicio:instance;
 begin ref(entity)            pool_nxt;
       ref(entity)            pool_lim;
       ref(pfilent)           sysout;
       ref(filent)            sysin;
       integer logfile; -- >0:log file's key, 0:no, <0: suspended
       ref(filent)            fil_lst;
       ref(thunk)             thk_lst;
       integer                edt_ovf;
       long real              ini_tim;
       range(0:MAX_ACT)       act_lvl;
       range(0:MAX_EVT)       obs_evt;
       boolean                stp;
       boolean                trc;
       character              lwten;
       character              dcmrk;
       integer                maxint;
       integer                minint;
       integer                maxrank;
       real                   maxreal;
       real                   minreal;
       long real              maxlreal;
       long real              minlreal;
       infix(txtqnt)          simid;
       infix(labqnt)          erh;       -- Current error return label
       infix(quant)           ern;       -- Current error return variable
 end;

 Visible record arbody:entity;
 begin
       ref(arhead) head;
 end;

 Visible record boo_arr:arbody begin boolean         elt(0) end;
 Visible record cha_arr:arbody begin character       elt(0) end;
 Visible record sin_arr:arbody begin short integer   elt(0) end;
 Visible record int_arr:arbody begin integer         elt(0) end;
 Visible record rea_arr:arbody begin real            elt(0) end;
 Visible record lrl_arr:arbody begin long real       elt(0) end;
 Visible record ref_arr:arbody begin ref(instance)   elt(0) end;
 Visible record txt_arr:arbody begin infix(txtqnt)   elt(0) end;

 Visible record arhead:entity;
 begin range(0:MAX_DIM)    ndim;
       integer              nelt;
       infix(arrbnd)       bound(0);
 end;

 Visible record arrbnd;  info  "TYPE";
 begin integer   lb;
       integer   ub;
       variant   integer   dope;
       variant   integer   neg_base;
 end;

 Visible record arent2:entity;
 begin integer lb_1;
       integer ub_1;
       integer dope;
       integer lb_2;
       integer ub_2;
       integer neg_base;
 end;

 Visible record boo_arr_2:arent2 begin boolean       elt(0) end;
 Visible record cha_arr_2:arent2 begin character     elt(0) end;
 Visible record sin_arr_2:arent2 begin short integer elt(0) end;
 Visible record int_arr_2:arent2 begin integer       elt(0) end;
 Visible record rea_arr_2:arent2 begin real          elt(0) end;
 Visible record lrl_arr_2:arent2 begin long real     elt(0) end;
 Visible record ref_arr_2:arent2 begin ref(instance) elt(0) end;
 Visible record txt_arr_2:arent2 begin infix(txtqnt) elt(0) end;

 Visible record arent1:entity;
 begin integer lb;
       integer ub;
 end;

 Visible record boo_arr_1:arent1 begin boolean       elt(0) end;
 Visible record cha_arr_1:arent1 begin character     elt(0) end;
 Visible record sin_arr_1:arent1 begin short integer elt(0) end;
 Visible record int_arr_1:arent1 begin integer       elt(0) end;
 Visible record rea_arr_1:arent1 begin real          elt(0) end;
 Visible record lrl_arr_1:arent1 begin long real     elt(0) end;
 Visible record ref_arr_1:arent1 begin ref(instance) elt(0) end;
 Visible record txt_arr_1:arent1 begin infix(txtqnt) elt(0) end;

 Visible record txtqnt;  info "TYPE";
 begin ref(txtent)        ent;
       range(0:MAX_TXT)   cp;
       range(0:MAX_TXT)   sp;
       range(0:MAX_TXT)   lp;
 end;

 Visible record txtent:entity;
 begin range(0:MAX_TXT)    ncha;
       character            cha(0);
 end;
%title ******   Q  u  a  n  t  i  t  i  e  s   ******

 Visible record labqnt;  info "TYPE";
 begin ref(instance)       sl;
       label               pad;
       range(0:MAX_CLV)   clv;
 end;

 Visible record proqnt;  info "TYPE";
 begin ref(instance)      sl;
       ref(pro_ptp)       ppp;
       ref(cla_pre_ptp)   qal;
 end;

 Visible record swtqnt;  info "TYPE";
 begin ref(instance)      sl;
       ref(swtdes)        des;
 end;

 Visible record PARDES;
 begin range(0:MAX_PAR)    code;
       range(0:MAX_KIND)   kind;
       range(0:MAX_TYPE)   type;
 end;

 Visible record REFPARDES:PARDES;
 begin ref(cla_pre_ptp) qal end;

 Visible record LITPARDES:PARDES;
 begin variant  boolean         l_boo;
       variant  character       l_cha;
       variant  short integer   l_sin;
       variant  integer         l_int;
       variant  real            l_rea;
       variant  long real       l_lrl;
       variant  ref(instance)  l_ref;
       variant  ref(txtqnt)    l_txt;
 end;

 Visible record THKPARDES:PARDES;
 begin label pad end;

 Visible record REFTHKPARDES:REFPARDES;
 begin label pad end;

 Visible record PARQNT;  info  "TYPE";
 begin ref(atrdes) fp;
       ref(pardes) ap;
       ref(entity) ent;
       boolean sem;
       variant field() fld;
       variant label pad;
               range(0:MAX_CLV) clv;
       variant ref(pro_ptp) ppp;
               ref(cla_pre_ptp) qal;
       variant ref(swtdes) des;
 end;

 Visible record quant;   info "TYPE";
 begin variant boolean       boo; -- boolean quantity
       variant character     cha; -- character quantity
       variant short integer sin; -- short integer quantity
       variant integer       int; -- integer quantity
       variant real          rea; -- real quantity
       variant long real     lrl; -- long real quantity
       variant ref(instance) pnt; -- instance reference quantity
       variant infix(txtqnt) txt; -- text reference quantity
       variant ref(entity)   arr; -- array quantity
       variant infix(proqnt) pro; -- procedure quantity
       variant infix(labqnt) lab; -- label quantity
       variant infix(swtqnt) swt; -- switch quantity
       variant ref(instance) ins; --  pointer to some instance
               field()       fld; --  offset within that instance
       variant ref(entity)   ent; --  pointer to some entity
       variant ref()         any; --  pointer to some object unit
 end;
%title ***   M o d u l e   a n d   S i m o b   I  n f o   ***

 Visible record extptp;          --- Prototype extension
 begin ref(identifier) idt;
       ref(modinf) mod_inf;
       ref(atrvec) atr_vec;      -- List of attributes (or none).
       range(0:MAX_BLK) blk_typ; -- Block type (SUB/PRO/FNC/CLA/PRE)
 end;

 Visible record identifier;
 begin range(0:MAX_BYT)   ncha;
       character          cha(0);
 end;

 Visible record modinf;
 begin ref(modvec) mod_vec;            -- reference to list of all modules used
                                       -- by this module, =ONONE if no modules
       ref(identifier) sim_idt;        -- Class/procedure identifier,
                                       -- =ONONE for a program
       ref(identifier) source_file;    -- Name of source file, =ONONE
                                       -- if source file is sysin
       ref(identifier) mod_idt;        -- Module identifier in case
                                       -- of a separate compilation,
                                       -- else =ONONE
       integer check;                  -- Checkcode in case of
                                       -- separate compilation, else 0
       range(0:16000) rts_vers;        -- RTS version
       range(0:16000) fec_vers;        -- FEC version
       range(0:2) smb_lvl;             -- Denotes the level at which this
                                       -- module has been compiled.
                                       -- 0:min, 1:descriptor, 2:full
 end;

 Visible record modvec;
 begin range(0:255) nmod;                -- number of modules
       infix(moddes) mod(0);
 end;

 Visible record moddes;
 begin ref(ptp) pp;               -- prototype of ext. proc or class.
       integer check;             -- expected checkcode
 end;

 end;
