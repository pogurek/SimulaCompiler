 Module SNTR("RTS 105");
 begin Sysinsert COMN;

       -----------------------------------------------------------------------
       ---                                                                 ---
       ---  COPYRIGHT 1985 by                                              ---
       ---  Simula a.s.                                                    ---
       ---  Postboks 335, Blindern                                         ---
       ---  N-0314 Oslo 3, Norway                                          ---
       ---                                                                 ---
       ---                                                                 ---
       ---                                                                 ---
       ---                 P O R T A B L E     S I M U L A                 ---
       ---                                                                 ---
       ---                    F O R    N O R D    5 0 0                    ---
       ---                                                                 ---
       ---                                                                 ---
       ---               S i m u l e t t a    P a r t    o f               ---
       ---                                                                 ---
       ---                   C l a s s    S I N T R A N                    ---
       ---                                                                 ---
       ---                                                                 ---
       ---                                                                 ---
       -----------------------------------------------------------------------

%page
 Record SINTRAN:instance; --- Describes an instance of class SINTRAN
 begin integer status end;

 --- Job Mode Codes -- from RSIO (MON 143)

 define J_TERM=0;   --- Interactive program
 define J_BATCH=1;  --- Batch job
 define J_MODE=2;   --- @MODE job
 define J_RT=3;     --- RT-program

 ---------   C U R R E N T    J O B ' S    I N F O R M A T I O N   ---------

 Record job_info;
 begin integer mode;            --- TERM/BATCH/MODE/RT
       integer Rlun;
       integer Wlun;
       integer xinfo;
       integer termno;          --- User's terminal number
       integer termtype;        --- User's terminal type
       infix(seginfo) seg(32);  --- Segment information
 end;

 Record seginfo;
 begin infix(string) ident;
       range(0:3) kind;         --- USP/PRG/FIL/WRK
       range(0:255) key;        --- PRG:link-key, FIL:key
       Boolean mislnk;          --- Missing link file
       size lng;                --- Data segment length
 end;

 infix(job_info) job;               --- Job info (mode,Runit,Wunit etc.)
%title ******    M O N I T O R    R E Q U E S T S    ******

 Sysroutine("M:SETE") MON_SETE;     --- Set user trap enable bit no. t
 import integer t  end;

 Sysroutine("M:CLTE") MON_CLTE;     --- Clear user trap enable bit no. t
 import integer t  end;

 Sysroutine("M:COMND") MON_COMND;   --- SINTRAN III Command
 import infix(string) tx  end;

 Sysroutine("M:OPEN") MON_OPEN;   --- Open File
 import integer key,acode; infix(string) id,tp;
 export integer unit  end;

 Sysroutine("M:CLOSE") MON_CLOSE;   --- Close File
 import integer unit  end;

 Sysroutine("M:OUTBT") MON_OUTBT;   --- Output byte
 import integer unit,byt  end;

 Sysroutine("M:INBT") MON_INBT;   --- Input byte
 import integer unit; export integer byt  end;

 Sysroutine("M:RESRV") MON_RESRV;   --- Reserve device unit
 import integer unit,cod  end;

 Sysroutine("M:RELES") MON_RELES;   --- Release device unit
 import integer unit,cod  end;

 Sysroutine("M:ECHOM") MON_ECHOM;   --- Set terminal's echo mode
 import integer unit,mode,bitmap1,bitmap2,bitmap3,bitmap4  end;

 Sysroutine("M:BRKM") MON_BRKM;   --- Set terminal's break mode
 import integer unit,mode,bitmap1,bitmap2,bitmap3,bitmap4,nchar  end;

 Sysroutine("M:LEAVE") MON_LEAVE;   --- Leave the program
 end;

 Sysroutine("M:MGTTY") MON_MGTTY;   --- Get terminal type
 import integer unit; export integer tty  end;

 Sysroutine("M:MSTTY") MON_MSTTY;   --- Set terminal type
 import integer unit,tty  end;

 Sysroutine("M:RSIO") MON_RSIO;     --- Get program's xqt-mode etc.
 import name(infix(job_info)) job  end;

 Sysroutine("M:RMAX") MON_RMAX;   --- Read File's maxbyte pointer
 import integer unit; export integer mxb  end;

 Sysroutine("M:SMAX") MON_SMAX;   --- Set File's maxbyte pointer
 import integer unit,mxb  end;

 Sysroutine("M:DVOUTS") MON_DVOUTS;   --- Output string
 import integer unit; infix(string) str  end;

 Sysroutine("M:MAGTP") MON_MAGTP;     --- Perform Mag-tape function
 import integer unit,fnc  end;

 Sysroutine("M:MAGTW") MON_MAGTW;     --- Perform Mag-tape WRITE operation
 import integer unit,fnc; infix(string) buf  end;

 Sysroutine("M:MAGTR") MON_MAGTR;     --- Perform Mag-tape READ operation
 import integer unit,fnc; infix(string) buf; export integer res  end;
%title ******    V I S I B L E    R O U T I N E S    ******
 Routine STR; import infix(TXTQNT) tx; export infix(string) st;
 begin st.nchr:=tx.lp-tx.sp;
       if tx.lp=0 then st.chradr:=noname
       else st.chradr:=name(tx.ent.cha(tx.sp)) endif;
 end;

 Visible routine SETE;   --- Set user trap enable bit
 import ref(SINTRAN) contxt; integer t;
 begin MON_SETE(t);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine CLTE;   --- Clear user trap enable bit
 import ref(SINTRAN) contxt; integer t;
 begin MON_CLTE(t);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine COMND;   --- SINTRAN III Command
 import ref(SINTRAN) contxt; infix(TXTQNT) tx;
 begin MON_COMND(STR(tx));
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine OPEN;   --- Open File
 import ref(SINTRAN) contxt; integer key,acode; infix(TXTQNT) id,tp;
 export integer unit;
 begin unit:=MON_OPEN(key,acode,STR(id),STR(tp));
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine CLOSE;   --- Close File
 import ref(SINTRAN) contxt; integer unit;
 begin MON_CLOSE(unit);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine OUTBT;   --- Output byte
 import ref(SINTRAN) contxt; integer unit,byt;
 begin MON_OUTBT(unit,byt);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine INBT;   --- Input byte
 import ref(SINTRAN) contxt; integer unit; export integer byt;
 begin byt:=MON_INBT(unit);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine RESRV;   --- Reserve device unit
 import ref(SINTRAN) contxt; integer unit,code;
 begin MON_RESRV(unit,code);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine RELES;   --- Release device unit
 import ref(SINTRAN) contxt; integer unit,code;
 begin MON_RELES(unit,code);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine ECHOM;   --- Set terminal's echo mode
 import ref(SINTRAN) contxt;
 integer unit,mode,bitmap1,bitmap2,bitmap3,bitmap4;
 begin MON_ECHOM(unit,mode,bitmap1,bitmap2,bitmap3,bitmap4);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine BRKM;   --- Set terminal's break mode
 import ref(SINTRAN) contxt;
 integer unit,mode,bitmap1,bitmap2,bitmap3,bitmap4,nchar;
 begin MON_BRKM(unit,mode,bitmap1,bitmap2,bitmap3,bitmap4,nchar);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine LEAVE;   --- Leave the program
 import ref(SINTRAN) contxt;
 begin MON_LEAVE end;

 Visible routine MGTTY;   --- Get terminal type
 import ref(SINTRAN) contxt; integer unit; export integer tty;
 begin tty:=MON_MGTTY(unit);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine MSTTY;   --- Set terminal type
 import ref(SINTRAN) contxt; integer unit,tty;
 begin MON_MSTTY(unit,tty);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine JOBMODE;     --- Get program's xqt-mode etc.
 import ref(SINTRAN) contxt; export integer mode;
 begin MON_RSIO(@job); mode:=job.mode end;

 Visible routine JOBRUNIT;     --- Get program's read unit
 import ref(SINTRAN) contxt; export integer unit;
 begin MON_RSIO(@job); unit:=job.Rlun end;

 Visible routine JOBWUNIT;     --- Get program's write unit
 import ref(SINTRAN) contxt; export integer unit;
 begin MON_RSIO(@job); unit:=job.Wlun end;

 Visible routine RMAX;   --- Read File's maxbyte pointer
 import ref(SINTRAN) contxt; integer unit; export integer mxb;
 begin mxb:=MON_RMAX(unit);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine SMAX;   --- Set File's maxbyte pointer
 import ref(SINTRAN) contxt; integer unit,mxb;
 begin MON_SMAX(unit,mxb);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine DVOUTS;   --- Output string
 import ref(SINTRAN) contxt; integer unit; infix(TXTQNT) st;
 begin MON_DVOUTS(unit,STR(st));
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine MAGTP;   --- Perform Magnetic tape function
 import ref(SINTRAN) contxt; integer unit,fnc;
 begin MON_MAGTP(unit,fnc);
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine MAGTW;   --- Perform Magnetic tape WRITE operation
 import ref(SINTRAN) contxt; integer unit,fnc; infix(TXTQNT) buf;
 begin MON_MAGTW(unit,fnc,STR(buf));
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

 Visible routine MAGTR;   --- Perform Magnetic tape READ operation
 import ref(SINTRAN) contxt; integer unit,fnc; infix(TXTQNT) buf;
 export integer res;
 begin res:=MON_MAGTR(unit,fnc,STR(buf));
       if status > 0 then contxt.status:=status; status:=0 endif;
 end;

end;
